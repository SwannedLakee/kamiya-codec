"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.verbDeconjugate = exports.conjugateAuxiliaries = exports.conjugate = exports.conjugateTypeII = exports.conjugateTypeI = exports.auxiliaries = exports.conjugations = void 0;
const hiragana_1 = require("./hiragana");
exports.conjugations = [
    'Negative', 'Conjunctive', 'Dictionary', 'Conditional', 'Imperative', 'Volitional', 'Te', 'Ta', 'Tara', 'Tari',
    'Zu',
];
exports.auxiliaries = [
    'Potential',
    'Masu',
    'Nai',
    'Tai',
    'Tagaru',
    'Hoshii',
    'Rashii',
    'SoudaHearsay',
    'SoudaConjecture',
    'SeruSaseru',
    'ShortenedCausative',
    'ReruRareu',
    'CausativePassive',
    'ShortenedCausativePassive',
    'Ageru',
    'Sashiageru',
    'Yaru',
    'Morau',
    'Itadaku',
    'Kureru',
    'Kudasaru',
    'TeIru',
    'TeAru',
    'Miru',
    'Iku',
    'Kuru',
    'Oku',
    'Shimau',
    'TeOru',
];
const specialCasesRaw = [
    ['„ÅÇ„Çã', 'Negative', ''],
    ['„Åî„Åñ„Çã', 'Conjunctive', '„Åî„Åñ„ÅÑ'],
    ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', 'Conjunctive', '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
    ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', 'Conditional', '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
    ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', 'Imperative', '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
];
let specialCases = new Map([]);
for (const [verb, conj, result] of specialCasesRaw) {
    let outer = specialCases.get(verb);
    if (outer) {
        outer.set(conj, result);
    }
    else {
        specialCases.set(verb, new Map([[conj, result]]));
    }
}
const conjToIdx = new Map(exports.conjugations.filter(x => x !== 'Imperative').map((x, i) => [x, i]));
conjToIdx.set('Zu', (_a = conjToIdx.get('Negative')) !== null && _a !== void 0 ? _a : -1);
const tteRaw = [
    ['„Åè', ['„ÅÑ„Å¶', '„ÅÑ„Åü', '„ÅÑ„Åü„Çâ', '„ÅÑ„Åü„Çä']],
    ['„Åê', ['„ÅÑ„Åß', '„ÅÑ„Å†', '„ÅÑ„Å†„Çâ', '„ÅÑ„Å†„Çä']],
    ['„Åô', ['„Åó„Å¶', '„Åó„Åü', '„Åó„Åü„Çâ', '„Åó„Åü„Çä']],
    ['„Å¨', ['„Çì„Åß', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']],
    ['„Å∂', ['„Çì„Åß', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']],
    ['„ÇÄ', ['„Çì„Åß', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']],
    ['„Å§', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
    ['„Çã', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
    ['„ÅÜ', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
];
let tte = new Map([]);
for (const [tail, quad] of tteRaw) {
    tte.set(tail, quad);
}
function conjugateTypeI(verb, conj) {
    {
        if (verb === '„Åô„Çã') {
            return conjugateSuru(verb, conj);
        }
        else if (verb === '„Åè„Çã' || verb === 'Êù•„Çã') {
            return conjugateKuru(verb, conj);
        }
        else if (verb === '„Å†') {
            return conjugateDa(verb, conj);
        }
        else if (verb === '„Åß„Åô') {
            return conjugateDesu(verb, conj);
        }
        else if (verb.endsWith('„Åè„Å†„Åï„Çã')) {
            if (conj === 'Dictionary') {
                return [verb];
            }
            else if (conj === 'Conjunctive') {
                return [verb.slice(0, -2) + '„Åï„ÅÑ'];
            }
            else {
                throw new Error('unknown conjugation for -kudasaru');
            }
        }
        const specialHit = specialCases.get(verb);
        if (specialHit && specialHit.has(conj)) {
            return [specialHit.get(conj) || ''];
        }
        // The above inner-most `get` is guaranteed to be not-undefined, so the empty string will never be returned, but
        // TypeScript 3.0.1 doesn't treat `Map.has` as a type guard üò£.
    }
    const head = verb.slice(0, -1);
    const tail = verb.slice(-1);
    const idx = conjToIdx.get(conj === 'Imperative' ? 'Conditional' : conj);
    if (typeof idx === 'undefined') {
        throw new Error('Conjugation not yet implemented');
    }
    if (idx < 5) {
        if (tail === '„ÅÜ') {
            if (idx === 0) {
                return [head + '„Çè'];
            }
            return [head + hiragana_1.lookup('„ÅÇ', idx)];
        }
        return [head + hiragana_1.lookup(tail, idx)];
    }
    const tidx = idx - 5;
    const tteHit = tte.get((verb === 'Ë°å„Åè' || verb === '„ÅÑ„Åè') ? '„Å§' : tail);
    if (!tteHit) {
        throw new Error('Unknown verb ending. Is it in dictionary form?');
    }
    return [head + tteHit[tidx]];
}
exports.conjugateTypeI = conjugateTypeI;
function conjugateTypeII(verb, conj) {
    if (verb === '„Åô„Çã') {
        return conjugateSuru(verb, conj);
    }
    else if (verb === '„Åè„Çã' || verb === 'Êù•„Çã') {
        return conjugateKuru(verb, conj);
    }
    else if (verb === '„Å†') {
        return conjugateDa(verb, conj);
    }
    else if (verb === '„Åß„Åô') {
        return conjugateDesu(verb, conj);
    }
    const head = verb.slice(0, -1);
    switch (conj) {
        case 'Negative':
        case 'Zu': return [head];
        case 'Conjunctive': return [head];
        case 'Dictionary': return [verb];
        case 'Conditional': return [head + '„Çå'];
        case 'Imperative': return [head + '„Çç', head + '„Çà'];
        case 'Volitional': return [head + '„Çà„ÅÜ'];
        case 'Te': return [head + '„Å¶'];
        case 'Ta': return [head + '„Åü'];
        case 'Tara': return [head + '„Åü„Çâ'];
        case 'Tari': return [head + '„Åü„Çä'];
        default: throw new Error('Unhandled conjugation');
    }
}
exports.conjugateTypeII = conjugateTypeII;
function conjugateKuru(verb, conj) {
    let ret = '';
    switch (conj) {
        case 'Negative':
        case 'Zu':
            ret = '„Åì';
            break;
        case 'Conjunctive':
            ret = '„Åç';
            break;
        case 'Dictionary':
            ret = '„Åè„Çã';
            break;
        case 'Conditional':
            ret = '„Åè„Çå';
            break;
        case 'Imperative':
            ret = '„Åì„ÅÑ';
            break;
        case 'Volitional':
            ret = '„Åì„Çà„ÅÜ';
            break;
        case 'Te':
            ret = '„Åç„Å¶';
            break;
        case 'Ta':
            ret = '„Åç„Åü';
            break;
        case 'Tara':
            ret = '„Åç„Åü„Çâ';
            break;
        case 'Tari':
            ret = '„Åç„Åü„Çä';
            break;
        default: throw new Error('Unhandled conjugation');
    }
    const head = verb.slice(0, -1);
    if (head === '„Åè') {
        return [ret];
    }
    else if (head === 'Êù•') {
        return ['Êù•' + ret.slice(1)];
    }
    throw new Error('Expected input to be Êù•„Çã or „Åè„Çã');
}
function conjugateSuru(verb, conj) {
    switch (conj) {
        case 'Negative': return ['„Åó'];
        case 'Conjunctive': return ['„Åó'];
        case 'Dictionary': return ['„Åô„Çã'];
        case 'Conditional': return ['„Åô„Çå'];
        case 'Imperative': return ['„Åó„Çç', '„Åõ„Çà'];
        case 'Volitional': return ['„Åó„Çà„ÅÜ'];
        case 'Te': return ['„Åó„Å¶'];
        case 'Ta': return ['„Åó„Åü'];
        case 'Tara': return ['„Åó„Åü„Çâ'];
        case 'Tari': return ['„Åó„Åü„Çä'];
        case 'Zu': return ['„Åõ„Åö'];
        default: throw new Error('Unhandled conjugation');
    }
}
function conjugateDa(_verb, conj) {
    switch (conj) {
        case 'Negative': return ['„Åß„Å™„ÅÑ', '„Åß„ÅØ„Å™„ÅÑ', '„Åò„ÇÉ„Å™„ÅÑ'];
        case 'Dictionary': return ['„Å†'];
        case 'Conditional': return ['„Å™„Çâ'];
        // case 'Presumptive': return ['„Å†„Çç„ÅÜ']; // omitting this
        case 'Te': return ['„Åß'];
        case 'Ta': return ['„Å†„Å£„Åü'];
        case 'Tara': return ['„Å†„Å£„Åü„Çâ'];
        case 'Tari': return ['„Å†„Å£„Åü„Çä'];
        default: throw new Error('Unhandled conjugation');
    }
}
function conjugateDesu(_verb, conj) {
    switch (conj) {
        case 'Negative': return ['„Åß„ÅÇ„Çä„Åæ„Åõ„Çì', '„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì'];
        case 'Dictionary': return ['„Åß„Åô'];
        // case 'Presumptive': return ['„Åß„Åù„ÅÜ']; // omitting this
        case 'Te': return ['„Åß„Åó„Å¶'];
        case 'Ta': return ['„Åß„Åó„Åü'];
        case 'Tara': return ['„Åß„Åó„Åü„Çâ'];
        case 'Tari': return ['„Åß„Åó„Åü„Çä'];
        default: throw new Error('Unhandled conjugation');
    }
}
function conjugateStrict(verb, conj, typeII = false) {
    return ((verb.slice(-1) === '„Çã' && typeII) ? conjugateTypeII : conjugateTypeI)(verb, conj);
}
function conjugate(verb, conj, typeII = false) {
    const ret = conjugateStrict(verb, conj, typeII);
    if ((conj === 'Negative' || conj === 'Zu') && (verb !== '„Å†' && verb !== '„Åß„Åô')) {
        // Don't do this for da/desu because their negatives are baked in
        ret.push(ret[0] + (conj === 'Negative' ? '„Å™„ÅÑ' : '„Åö'));
    }
    else if (conj === 'Conjunctive') {
        ret.push(ret[0] + '„Åæ„Åô');
    }
    else if (conj === 'Conditional') {
        ret.push(ret[0] + '„Å∞');
    }
    else if (conj === 'Volitional') {
        ret.push(ret[0] + '„ÅÜ');
    }
    return ret;
}
exports.conjugate = conjugate;
function conjugateAuxiliaries(initialVerb, auxs, finalConj, initialTypeII = false) {
    if (auxs.length === 0) {
        return conjugate(initialVerb, finalConj, initialTypeII);
    }
    if (initialVerb === '„Å†' || initialVerb === '„Åß„Åô') {
        if (auxs.length === 1 && auxs[0] === 'Nai' && finalConj === 'Ta') {
            if (initialVerb === '„Å†') {
                return ['„Åß„ÅØ„Å™„Åã„Å£„Åü', '„Åò„ÇÉ„Å™„Åã„Å£„Åü'];
            }
            else {
                return ['„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü', '„Åß„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü'];
            }
        }
        throw new Error('unhandled copula auxiliaries/conjugation');
    }
    let verbs = [initialVerb];
    let typeII = initialTypeII;
    for (const [auxIdx, aux] of auxs.entries()) {
        const conj = auxIdx === auxs.length - 1 ? finalConj : 'Dictionary';
        const prevAux = auxs[auxIdx - 1];
        if (auxIdx !== auxs.length - 1 && (aux === 'Masu' || aux === 'Nai' || aux === 'Tai' || aux == 'Hoshii' ||
            aux === 'Rashii' || aux === 'SoudaConjecture' || aux === 'SoudaHearsay')) {
            throw new Error('must be final auxiliary');
        }
        if (prevAux === 'Kuru') {
            // While `conjugate` looks for with Kudasaru with `endsWith`, it looks for Kuru with exact-compare (because
            // potentially lots of things could end in kuru)
            const heads = verbs.map(s => s.slice(0, -2));
            const tails = conjugateAuxiliary('„Åè„Çã', aux, conj);
            verbs = heads.flatMap(prefix => tails.map(t => prefix + t));
        }
        else {
            verbs = verbs.flatMap(verb => conjugateAuxiliary(verb, aux, conj, typeII));
        }
        typeII = aux === 'Potential' || aux === 'SeruSaseru' || aux === 'ReruRareu' || aux === 'CausativePassive' ||
            aux === 'ShortenedCausativePassive' || aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Kureru' ||
            aux === 'Miru' || aux === 'TeIru';
    }
    return verbs;
}
exports.conjugateAuxiliaries = conjugateAuxiliaries;
function conjugateAuxiliary(verb, aux, conj, typeII = false) {
    if (aux === 'Potential') {
        const newverb = conjugateTypeI(verb, 'Conditional')[0] + '„Çã';
        return conjugateTypeII(newverb, conj);
    }
    else if (aux === 'Masu') {
        const base = conjugate(verb, 'Conjunctive', typeII)[0];
        switch (conj) {
            case 'Negative': return [base + '„Åæ„Åõ„Çì', base + '„Åæ„Åõ„Çì„Åß„Åó„Åü'];
            // case 'Conjunctive':
            case 'Dictionary': return [base + '„Åæ„Åô'];
            case 'Conditional': return [base + '„Åæ„Åô„Çå„Å∞'];
            case 'Imperative': return [base + '„Åæ„Åõ', base + '„Åæ„Åó']; // latter only for nasaru and ossharu
            case 'Volitional': return [base + '„Åæ„Åó„Çá„ÅÜ'];
            case 'Te': return [base + '„Åæ„Åó„Å¶'];
            case 'Ta': return [base + '„Åæ„Åó„Åü'];
            case 'Tara': return [base + '„Åæ„Åó„Åü„Çâ'];
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'Nai') {
        const base = conjugate(verb, 'Negative', typeII)[0];
        switch (conj) {
            case 'Negative': return [base + '„Å™„Åè„ÅØ„Å™„ÅÑ'];
            case 'Conjunctive': return [base + '„Å™„Åè'];
            case 'Dictionary': return [base + '„Å™„ÅÑ'];
            case 'Conditional': return [base + '„Å™„Åë„Çå„Å∞'];
            // case 'Imperative':
            // case 'Volitional':
            case 'Te': return [base + '„Å™„Åè„Å¶', base + '„Å™„ÅÑ„Åß']; // only the first is in Kamiya
            case 'Ta': return [base + '„Å™„Åã„Å£„Åü'];
            case 'Tara': return [base + '„Å™„Åã„Å£„Åü„Çâ'];
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'Tai') {
        const base = conjugate(verb, 'Conjunctive', typeII)[0];
        switch (conj) {
            case 'Negative': return [base + '„Åü„Åè„Å™„ÅÑ'];
            case 'Conjunctive': return [base + '„Åü„Åè'];
            case 'Dictionary': return [base + '„Åü„ÅÑ'];
            case 'Conditional': return [base + '„Åü„Åë„Çå„Å∞'];
            // case 'Imperative':
            // case 'Volitional':
            case 'Te': return [base + '„Åü„Åè„Å¶'];
            case 'Ta': return [base + '„Åü„Åã„Å£„Åü'];
            case 'Tara': return [base + '„Åü„Åã„Å£„Åü„Çâ'];
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'Tagaru') {
        switch (conj) {
            case 'Conditional':
            case 'Imperative':
            case 'Volitional':
            case 'Tari': throw new Error('Unhandled conjugation');
        }
        const bases = conjugate(verb, 'Conjunctive', typeII);
        const tagaruConj = conjugate('„Åü„Åå„Çã', conj, false);
        return tagaruConj.map(suffix => bases[0] + suffix);
    }
    else if (aux === 'Hoshii') {
        const base = conjugate(verb, 'Te', typeII)[0];
        switch (conj) {
            case 'Negative': return [base + '„Åª„Åó„Åè„Å™„ÅÑ'];
            case 'Conjunctive': return [base + '„Åª„Åó„Åè'];
            case 'Dictionary': return [base + '„Åª„Åó„ÅÑ'];
            case 'Conditional': return [base + '„Åª„Åó„Åë„Çå„Å∞'];
            // case 'Imperative':
            // case 'Volitional':
            case 'Te': return [base + '„Åª„Åó„Åè„Å¶'];
            case 'Ta': return [base + '„Åª„Åó„Åã„Å£„Åü'];
            case 'Tara': return [base + '„Åª„Åó„Åã„Å£„Åü„Çâ'];
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'Rashii') {
        const base1 = conjugate(verb, 'Ta', typeII)[0];
        const base2 = verb;
        const append = (suffix) => [base1, base2].map(prefix => prefix + suffix);
        switch (conj) {
            case 'Negative':
                const neg = conjugateAuxiliary(verb, 'Nai', 'Dictionary')[0];
                return [neg + '„Çâ„Åó„ÅÑ'];
            case 'Conjunctive': return append('„Çâ„Åó„Åè');
            case 'Dictionary': return append('„Çâ„Åó„ÅÑ');
            // case 'Conditional':
            // case 'Imperative':
            // case 'Volitional':
            case 'Te': return append('„Çâ„Åó„Åè„Å¶');
            // case 'Ta':
            // case 'Tara':
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'SoudaHearsay') {
        const base1 = conjugate(verb, 'Ta', typeII)[0];
        const base2 = verb; // dictionary form
        const append = (suffix) => [base1, base2].map(prefix => prefix + suffix);
        switch (conj) {
            // case 'Negative':
            // case 'Conjunctive':
            case 'Dictionary': return append('„Åù„ÅÜ„Å†');
            // case 'Conditional':
            // case 'Imperative':
            // case 'Volitional':
            // case 'Te':
            // case 'Ta':
            // case 'Tara':
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'SoudaConjecture') {
        const base = conjugate(verb, 'Conjunctive', typeII)[0];
        switch (conj) {
            // case 'Negative':
            // case 'Conjunctive':
            case 'Dictionary': return [base + '„Åù„ÅÜ„Å†', base + '„Åù„ÅÜ„Åß„Åô'];
            case 'Conditional': return [base + '„Åù„ÅÜ„Å™„Çâ'];
            // case 'Imperative':
            // case 'Volitional':
            // case 'Te':
            case 'Ta': return [base + '„Åù„ÅÜ„Å†„Å£„Åü', base + '„Åù„ÅÜ„Åß„Åó„Åü'];
            // case 'Tara':
            // case 'Tari':
            default: throw new Error('Unhandled conjugation');
        }
    }
    else if (aux === 'SeruSaseru' || aux === 'ShortenedCausative') {
        if (conj === 'Tara' || conj === 'Tari') {
            throw new Error('Unhandled conjugation');
        }
        let newverb;
        if (verb === 'Êù•„Çã' || verb === '„Åè„Çã') {
            newverb = (verb[0] === 'Êù•' ? 'Êù•' : '„Åì') + '„Åï„Åõ„Çã';
        }
        else if (verb === '„Åô„Çã') {
            newverb = '„Åï„Åõ„Çã';
        }
        else if (typeII) {
            newverb = conjugateTypeII(verb, 'Negative')[0] + '„Åï„Åõ„Çã';
        }
        else { // type I
            newverb = conjugateTypeI(verb, 'Negative')[0] + '„Åõ„Çã';
        }
        if (aux === 'ShortenedCausative') {
            newverb = newverb.slice(0, -2) + '„Åô';
            return conjugate(newverb, conj, false);
        }
        return conjugate(newverb, conj, true);
    }
    else if (aux === 'ReruRareu') {
        if (conj === 'Conditional' || conj === 'Imperative' || conj === 'Volitional' || conj === 'Tara' ||
            conj === 'Tari') {
            throw new Error('Unhandled conjugation');
        }
        let newverb;
        if (verb === 'Êù•„Çã' || verb === '„Åè„Çã') {
            newverb = (verb[0] === 'Êù•' ? 'Êù•' : '„Åì') + '„Çâ„Çå„Çã';
        }
        else if (verb === '„Åô„Çã') {
            newverb = '„Åï„Çå„Çã';
        }
        else if (typeII) {
            newverb = conjugateTypeII(verb, 'Negative')[0] + '„Çâ„Çå„Çã';
        }
        else { // type I
            newverb = conjugateTypeI(verb, 'Negative')[0] + '„Çå„Çã';
        }
        return conjugate(newverb, conj, true);
    }
    else if (aux === 'CausativePassive') {
        const newverb = conjugateAuxiliary(verb, 'SeruSaseru', 'Negative', typeII)[0] + '„Çâ„Çå„Çã';
        return conjugate(newverb, conj, true);
    }
    else if (aux === 'ShortenedCausativePassive') {
        const newverb = conjugateAuxiliary(verb, 'ShortenedCausative', 'Negative', typeII)[0] + '„Çå„Çã';
        return conjugate(newverb, conj, true);
    }
    else if (aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Yaru' || aux === 'Morau' || aux === 'Itadaku' ||
        aux === 'Kureru' || aux === 'Kudasaru' || aux === 'TeIru' || aux === 'TeAru' || aux === 'Miru' ||
        aux === 'Iku' || aux === 'Kuru' || aux === 'Oku' || aux === 'TeOru') {
        const vte = conjugate(verb, 'Te', typeII)[0];
        const endings = aux === 'Ageru' ? ['„ÅÇ„Åí„Çã']
            : aux === 'Sashiageru' ? ['Â∑Æ„Åó‰∏ä„Åí„Çã', '„Åï„Åó„ÅÇ„Åí„Çã']
                : aux === 'Yaru' ? ['„ÇÑ„Çã']
                    : aux === 'Morau' ? ['„ÇÇ„Çâ„ÅÜ']
                        : aux === 'Itadaku' ? ['„ÅÑ„Åü„Å†„Åè']
                            : aux === 'Kureru' ? ['„Åè„Çå„Çã']
                                : aux === 'Kudasaru' ? ['„Åè„Å†„Åï„Çã']
                                    : aux === 'TeIru' ? ['„ÅÑ„Çã', '„Çã']
                                        : aux === 'TeAru' ? ['„ÅÇ„Çã']
                                            : aux === 'Miru' ? ['„Åø„Çã']
                                                : aux === 'Iku' ? ['„ÅÑ„Åè']
                                                    : aux === 'Kuru' ? ['„Åè„Çã']
                                                        : aux === 'Oku' ? ['„Åä„Åè']
                                                            : aux === 'TeOru' ? ['„Åä„Çã']
                                                                : [];
        if (!endings[0]) {
            throw new Error('missing ternary');
        }
        if (aux === 'Kuru') {
            return conjugate(endings[0], conj).map(suffix => vte + suffix);
        }
        const endingTypeII = aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Kureru' || aux === 'TeIru' || aux === 'Miru';
        const newVerbs = endings.map(ending => vte + ending);
        return newVerbs.flatMap(v => conjugate(v, conj, endingTypeII));
    }
    else if (aux === 'Shimau') {
        const vte = conjugate(verb, 'Te', typeII)[0];
        const shimau = conjugate(vte + '„Åó„Åæ„ÅÜ', conj);
        const noTe = vte.slice(0, -1);
        // see https://www.sljfaq.org/afaq/colloquial-contractions.html
        if (vte.endsWith('„Å¶')) {
            // no rendaku
            const chau = conjugate(noTe + '„Å°„ÇÉ„ÅÜ', conj);
            const chimau = conjugate(noTe + '„Å°„Åæ„ÅÜ', conj);
            return shimau.concat(chau).concat(chimau);
        }
        const jimau = conjugate(noTe + '„Åò„Åæ„ÅÜ', conj);
        const dimau = conjugate(noTe + '„Å¢„Åæ„ÅÜ', conj);
        return shimau.concat(jimau).concat(dimau);
    }
    isNever(aux);
    throw new Error('Unhandled auxiliary');
}
function isNever(x) { return x; }
function verbDeconjugate(conjugated, dictionaryForm, typeII = false, maxAuxDepth = Infinity) {
    const hits = [];
    for (const conj of exports.conjugations) {
        try {
            const result = conjugate(dictionaryForm, conj, typeII);
            if (result.includes(conjugated)) {
                hits.push({ conjugation: conj, auxiliaries: [], result });
            }
        }
        catch (_a) { }
    }
    if (maxAuxDepth <= 0) {
        return hits;
    }
    for (const aux of exports.auxiliaries) {
        for (const conj of exports.conjugations) {
            try {
                const result = conjugateAuxiliary(dictionaryForm, aux, conj, typeII);
                if (result.includes(conjugated)) {
                    hits.push({ conjugation: conj, auxiliaries: [aux], result });
                }
            }
            catch (_b) { }
        }
    }
    if (maxAuxDepth <= 1) {
        return hits;
    }
    const penultimates = [
        'Ageru', 'Sashiageru', 'Yaru', 'Morau', 'Itadaku', 'Kureru', 'Kudasaru', 'Miru', 'Iku', 'Kuru', 'Oku', 'Shimau',
        'TeIru', 'TeAru', 'TeOru', 'Potential', 'ReruRareu', 'SeruSaseru'
    ];
    const depth2Finals = ['Masu', 'SoudaConjecture', 'SoudaHearsay', 'TeIru'];
    for (const penultimate of penultimates) {
        for (const final of depth2Finals) {
            for (const conj of exports.conjugations) {
                const auxs = [penultimate, final];
                try {
                    const result = conjugateAuxiliaries(dictionaryForm, auxs, conj, typeII);
                    if (result.includes(conjugated)) {
                        hits.push({ conjugation: conj, auxiliaries: auxs, result });
                    }
                }
                catch (_c) { }
            }
        }
    }
    if (maxAuxDepth <= 2) {
        return hits;
    }
    const antepenultimates = ['SeruSaseru', 'ReruRareu'];
    const depth3Finals = ['Masu'];
    for (const ante of antepenultimates) {
        for (const penultimate of penultimates) {
            for (const final of depth3Finals) {
                for (const conj of exports.conjugations) {
                    const auxs = [ante, penultimate, final];
                    try {
                        const result = conjugateAuxiliaries(dictionaryForm, auxs, conj, typeII);
                        if (result.includes(conjugated)) {
                            hits.push({ conjugation: conj, auxiliaries: auxs, result });
                        }
                    }
                    catch (_d) { }
                }
            }
        }
    }
    return hits;
}
exports.verbDeconjugate = verbDeconjugate;
var adjective_1 = require("./adjective");
Object.defineProperty(exports, "adjConjugations", { enumerable: true, get: function () { return adjective_1.adjConjugations; } });
Object.defineProperty(exports, "adjConjugate", { enumerable: true, get: function () { return adjective_1.adjConjugate; } });
Object.defineProperty(exports, "adjDeconjugate", { enumerable: true, get: function () { return adjective_1.adjDeconjugate; } });
