import {lookup} from './hiragana';

export enum Conjugation {
  Negative,
  Conjunctive,
  Dictionary,
  Conditional,
  Imperative,
  Volitional,
  Te,
  Ta,
  Tara,
  Tari
}

const specialCasesRaw: Array<[String, Conjugation, String]> = [
  ['„ÅÇ„Çã', Conjugation.Negative, ''], // fully negative conjugation would be ''+nai
  ['„Åî„Åñ„Çã', Conjugation.Conjunctive, '„Åî„Åñ„ÅÑ'],
  ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', Conjugation.Conjunctive, '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
  ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', Conjugation.Conditional, '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
  ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', Conjugation.Imperative, '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
];
let specialCases: Map<String, Map<Conjugation, String>> = new Map([]);
for (const [verb, conj, result] of specialCasesRaw) {
  let outer = specialCases.get(verb);
  if (outer) {
    outer.set(conj, result);
  } else {
    specialCases.set(verb, new Map([[conj, result]]));
  }
}
const conjToIdx: Map<Conjugation, number> = new Map([
  Conjugation.Negative, Conjugation.Conjunctive, Conjugation.Dictionary, Conjugation.Conditional,
  Conjugation.Volitional, Conjugation.Te, Conjugation.Ta, Conjugation.Tara, Conjugation.Tari
].map((x, i) => [x, i]) as Array<[Conjugation, number]>);

const tteRaw: Array<[String, String[]]> = [
  ['„Åè', ['„ÅÑ„Å¶', '„ÅÑ„Åü', '„ÅÑ„Åü„Çâ', '„ÅÑ„Åü„Çä']],
  ['„Åê', ['„ÅÑ„Åß', '„ÅÑ„Å†', '„ÅÑ„Å†„Çâ', '„ÅÑ„Å†„Çä']],
  ['„Åô', ['„Åó„Å¶', '„Åó„Å†', '„Åó„Å†„Çâ', '„Åó„Å†„Çä']],
  ['„Å¨', ['„Çì„Å¶', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']],
  ['„Å∂', ['„Çì„Å¶', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']], // same as above
  ['„ÇÄ', ['„Çì„Å¶', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']], // ditto
  ['„Å§', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
  ['„Çã', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']], // same as above and below
  ['„ÅÜ', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
];
let tte: Map<String, String[]> = new Map([]);
for (const [tail, quad] of tteRaw) { tte.set(tail, quad); }

export function conjugateTypeI(verb: String, conj: Conjugation): String {
  {
    const specialHit = specialCases.get(verb);
    if (specialHit && specialHit.has(conj)) { return specialHit.get(conj) || ''; }
    // The above inner-most `get` is guaranteed to be not-undefined, so the empty string will never be returned, but
    // TypeScript 3.0.1 doesn't treat `Map.has` as a type guard üò£.
  }
  const head = verb.slice(0, -1);
  const tail = verb.slice(-1);
  const idx = conjToIdx.get(conj === Conjugation.Imperative ? Conjugation.Conditional : conj);
  if (typeof idx === 'undefined') { throw new Error('Conjugation not yet implemented'); }
  if (idx < 5) {
    if (tail === '„ÅÜ') {
      if (idx === 0) { return head + '„Çè'; }
      return head + lookup('„ÅÇ', idx);
    }
    return head + lookup(tail, idx);
  }
  const tidx = idx - 5;
  const tteHit = tte.get((verb === 'Ë°å„Åè' || verb === '„ÅÑ„Åè') ? '„Å§' : tail);
  if (!tteHit) { throw new Error('Unknown verb ending. Is it in dictionary form?'); }
  return head + tteHit[tidx];
}

export function conjugateTypeII(verb: String, conj: Conjugation): String {
  const head = verb.slice(0, -1);
  switch (conj) {
  case Conjugation.Negative: return head;
  case Conjugation.Conjunctive: return head;
  case Conjugation.Dictionary: return verb;
  case Conjugation.Conditional: return head + '„Çå';
  case Conjugation.Imperative: return head + '„Çç'; // „Çà also legitimate here.
  case Conjugation.Volitional: return head + '„Çà„ÅÜ';
  case Conjugation.Te: return head + '„Å¶';
  case Conjugation.Ta: return head + '„Åü';
  case Conjugation.Tara: return head + '„Åü„Çâ';
  case Conjugation.Tari: return head + '„Åü„Çä';
  default: throw new Error('Unhandled conjugation');
  }
}