import {lookup} from './hiragana';

export enum Conjugation {
  Negative,
  Conjunctive,
  Dictionary,
  Conditional,
  Imperative,
  Volitional,
  Te,
  Ta,
  Tara,
  Tari
}

const specialCasesRaw: Array<[string, Conjugation, string]> = [
  ['„ÅÇ„Çã', Conjugation.Negative, ''], // fully negative conjugation would be ''+nai
  ['„Åî„Åñ„Çã', Conjugation.Conjunctive, '„Åî„Åñ„ÅÑ'],
  ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', Conjugation.Conjunctive, '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
  ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', Conjugation.Conditional, '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
  ['„ÅÑ„Çâ„Å£„Åó„ÇÉ„Çã', Conjugation.Imperative, '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ'],
];
let specialCases: Map<string, Map<Conjugation, string>> = new Map([]);
for (const [verb, conj, result] of specialCasesRaw) {
  let outer = specialCases.get(verb);
  if (outer) {
    outer.set(conj, result);
  } else {
    specialCases.set(verb, new Map([[conj, result]]));
  }
}
const conjToIdx: Map<Conjugation, number> = new Map([
  Conjugation.Negative, Conjugation.Conjunctive, Conjugation.Dictionary, Conjugation.Conditional,
  Conjugation.Volitional, Conjugation.Te, Conjugation.Ta, Conjugation.Tara, Conjugation.Tari
].map((x, i) => [x, i]) as Array<[Conjugation, number]>);

const tteRaw: Array<[string, string[]]> = [
  ['„Åè', ['„ÅÑ„Å¶', '„ÅÑ„Åü', '„ÅÑ„Åü„Çâ', '„ÅÑ„Åü„Çä']],
  ['„Åê', ['„ÅÑ„Åß', '„ÅÑ„Å†', '„ÅÑ„Å†„Çâ', '„ÅÑ„Å†„Çä']],
  ['„Åô', ['„Åó„Å¶', '„Åó„Å†', '„Åó„Å†„Çâ', '„Åó„Å†„Çä']],
  ['„Å¨', ['„Çì„Å¶', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']],
  ['„Å∂', ['„Çì„Å¶', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']], // same as above
  ['„ÇÄ', ['„Çì„Å¶', '„Çì„Å†', '„Çì„Å†„Çâ', '„Çì„Å†„Çä']], // ditto
  ['„Å§', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
  ['„Çã', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']], // same as above and below
  ['„ÅÜ', ['„Å£„Å¶', '„Å£„Åü', '„Å£„Åü„Çâ', '„Å£„Åü„Çä']],
];
let tte: Map<string, string[]> = new Map([]);
for (const [tail, quad] of tteRaw) { tte.set(tail, quad); }

export function conjugateTypeI(verb: string, conj: Conjugation): string {
  {
    if (verb === '„Åô„Çã') {
      return conjugateSuru(verb, conj);
    } else if (verb === '„Åè„Çã' || verb === 'Êù•„Çã') {
      return conjugateKuru(verb, conj);
    }
    const specialHit = specialCases.get(verb);
    if (specialHit && specialHit.has(conj)) { return specialHit.get(conj) || ''; }
    // The above inner-most `get` is guaranteed to be not-undefined, so the empty string will never be returned, but
    // TypeScript 3.0.1 doesn't treat `Map.has` as a type guard üò£.
  }
  const head = verb.slice(0, -1);
  const tail = verb.slice(-1);
  const idx = conjToIdx.get(conj === Conjugation.Imperative ? Conjugation.Conditional : conj);
  if (typeof idx === 'undefined') { throw new Error('Conjugation not yet implemented'); }
  if (idx < 5) {
    if (tail === '„ÅÜ') {
      if (idx === 0) { return head + '„Çè'; }
      return head + lookup('„ÅÇ', idx);
    }
    return head + lookup(tail, idx);
  }
  const tidx = idx - 5;
  const tteHit = tte.get((verb === 'Ë°å„Åè' || verb === '„ÅÑ„Åè') ? '„Å§' : tail);
  if (!tteHit) { throw new Error('Unknown verb ending. Is it in dictionary form?'); }
  return head + tteHit[tidx];
}

export function conjugateTypeII(verb: string, conj: Conjugation): string {
  if (verb === '„Åô„Çã') {
    return conjugateSuru(verb, conj);
  } else if (verb === '„Åè„Çã' || verb === 'Êù•„Çã') {
    return conjugateKuru(verb, conj);
  }
  const head = verb.slice(0, -1);
  switch (conj) {
  case Conjugation.Negative: return head;
  case Conjugation.Conjunctive: return head;
  case Conjugation.Dictionary: return verb;
  case Conjugation.Conditional: return head + '„Çå';
  case Conjugation.Imperative: return head + '„Çç'; // „Çà also legitimate here.
  case Conjugation.Volitional: return head + '„Çà„ÅÜ';
  case Conjugation.Te: return head + '„Å¶';
  case Conjugation.Ta: return head + '„Åü';
  case Conjugation.Tara: return head + '„Åü„Çâ';
  case Conjugation.Tari: return head + '„Åü„Çä';
  default: throw new Error('Unhandled conjugation');
  }
}

function conjugateKuru(verb: string, conj: Conjugation) {
  let ret = '';
  switch (conj) {
  case Conjugation.Negative: ret = '„Åì'; break;
  case Conjugation.Conjunctive: ret = '„Åç'; break;
  case Conjugation.Dictionary: ret = '„Åè„Çã'; break;
  case Conjugation.Conditional: ret = '„Åì„Çå'; break;
  case Conjugation.Imperative: ret = '„Åì„ÅÑ'; break;
  case Conjugation.Volitional: ret = '„Åì„Çà„ÅÜ'; break;
  case Conjugation.Te: ret = '„Åç„Å¶'; break;
  case Conjugation.Ta: ret = '„Åç„Åü'; break;
  case Conjugation.Tara: ret = '„Åç„Åü„Çâ'; break;
  case Conjugation.Tari: ret = '„Åç„Åü„Çä'; break;
  default: throw new Error('Unhandled conjugation');
  }
  const head = verb.slice(0, -1);
  if (head === '„Åè') {
    return ret;
  } else if (head === 'Êù•') {
    return 'Êù•' + ret.slice(1);
  }
  throw new Error('Expected input to be Êù•„Çã or „Åè„Çã');
}

function conjugateSuru(verb: string, conj: Conjugation) {
  switch (conj) {
  case Conjugation.Negative: return '„Åó';
  case Conjugation.Conjunctive: return '„Åó';
  case Conjugation.Dictionary: return '„Åô„Çã';
  case Conjugation.Conditional: return '„Åô„Çå';
  case Conjugation.Imperative: return '„Åõ„Çà'; // „Åó„Çç ok too
  case Conjugation.Volitional: return '„Åó„Çà„ÅÜ';
  case Conjugation.Te: return '„Åó„Å¶';
  case Conjugation.Ta: return '„Åó„Åü';
  case Conjugation.Tara: return '„Åó„Åü„Çâ';
  case Conjugation.Tari: return '„Åó„Åü„Çä';
  default: throw new Error('Unhandled conjugation');
  }
}

export function typeIToPotential(verb: string): string { return conjugateTypeI(verb, Conjugation.Conditional) + '„Çã'; }

export enum Auxiliary {
  Potential,
  Masu,
  Nai,
  Tai,
  Tagaru,
  Hoshii,
  Rashii,
  Souda,
  SeruSaseru,
  ReruRareu
}

export function conjugate(verb: string, conj: Conjugation, typeII: boolean = false): string {
  return ((verb.slice(-1) === '„Çã' && typeII) ? conjugateTypeII : conjugateTypeI)(verb, conj);
}

export function conjugateAuxiliary(verb: string, aux: Auxiliary, conj: Conjugation, typeII: boolean = false): string {
  if (aux === Auxiliary.Masu) {
    const base = conjugate(verb, Conjugation.Conjunctive, typeII);
    switch (conj) {
    case Conjugation.Negative: return base + '„Åæ„Åõ„Çì';
    // case Conjugation.Conjunctive:
    case Conjugation.Dictionary: return base + '„Åæ„Åô';
    case Conjugation.Conditional: return base + '„Åæ„Åô„Çå„Å∞';
    case Conjugation.Imperative: return base + '„Åæ„Åõ';
    case Conjugation.Volitional: return base + '„Åæ„Åó„Çá„ÅÜ';
    case Conjugation.Te: return base + '„Åæ„Åó„Å¶';
    case Conjugation.Ta: return base + '„Åæ„Åó„Åü';
    case Conjugation.Tara: return base + '„Åæ„Åó„Åü„Çâ';
    // case Conjugation.Tari:
    default: throw new Error('Unhandled conjugation');
    }
  } else if (aux === Auxiliary.Nai) {
    const base = conjugate(verb, Conjugation.Negative, typeII);
    switch (conj) {
    case Conjugation.Negative: return base + '„Å™„Åè„ÅØ„Å™„ÅÑ';
    case Conjugation.Conjunctive: return base + '„Å™„Åè';
    case Conjugation.Dictionary: return base + '„Å™„ÅÑ';
    case Conjugation.Conditional: return base + '„Å™„Åë„Çå„Å∞';
    // case Conjugation.Imperative: return base + '„Åæ„Åõ';
    // case Conjugation.Volitional: return base +'„Åæ„Åó„Çá„ÅÜ';
    case Conjugation.Te: return base + '„Å™„Åè„Å¶';
    case Conjugation.Ta: return base + '„Å™„Åã„Å£„Åü';
    case Conjugation.Tara: return base + '„Å™„Åã„Å£„Åü„Çâ';
    // case Conjugation.Tari:
    default: throw new Error('Unhandled conjugation');
    }
  } else if (aux === Auxiliary.Tai) {
    const base = conjugate(verb, Conjugation.Conjunctive, typeII);
    switch (conj) {
    case Conjugation.Negative: return base + '„Åü„Åè„Å™„ÅÑ';
    case Conjugation.Conjunctive: return base + '„Åü„Åè';
    case Conjugation.Dictionary: return base + '„Åü„ÅÑ';
    case Conjugation.Conditional: return base + '„Åü„Åë„Çå„Å∞';
    // case Conjugation.Imperative: return base + '„Åæ„Åõ';
    // case Conjugation.Volitional: return base +'„Åæ„Åó„Çá„ÅÜ';
    case Conjugation.Te: return base + '„Åü„Åè„Å¶';
    case Conjugation.Ta: return base + '„Åü„Åã„Å£„Åü';
    case Conjugation.Tara: return base + '„Åü„Åã„Å£„Åü„Çâ';
    // case Conjugation.Tari:
    default: throw new Error('Unhandled conjugation');
    }
  } else if (aux === Auxiliary.Tagaru) {
    switch (conj) {
    case Conjugation.Conditional:
    case Conjugation.Imperative:
    case Conjugation.Volitional:
    case Conjugation.Tari: throw new Error('Unhandled conjugation');
    }
    const base = conjugate(verb, Conjugation.Conjunctive, typeII);
    const tagaruConj = conjugateTypeI('„Åü„Åå„Çã', conj);
    return base + tagaruConj;
  } else {
    throw new Error('Unhandled auxiliary');
  }
}