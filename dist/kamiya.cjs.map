{
  "version": 3,
  "sources": ["../index.ts", "../hiragana.ts", "../adjective.ts"],
  "sourcesContent": ["import {lookup} from './hiragana';\n\nexport const conjugations = [\n  'Negative', 'Conjunctive', 'Dictionary', 'Conditional', 'Imperative', 'Volitional', 'Te', 'Ta', 'Tara', 'Tari',\n  'Zu', // Not in Kamiya\n] as const;\nexport type Conjugation = typeof conjugations[number];\n\nexport const auxiliaries = [\n  'Potential',\n  'Masu',\n  'Nai',\n  'Tai',\n  'Tagaru',\n  'Hoshii',\n  'Rashii',\n  'SoudaHearsay',\n  'SoudaConjecture',\n  'SeruSaseru',\n  'ShortenedCausative',\n  'ReruRareru',\n  'CausativePassive',\n  'ShortenedCausativePassive',\n  'Ageru', // Kamiya section 7.15\n  'Sashiageru',\n  'Yaru',\n  'Morau', // Kamiya section 7.16\n  'Itadaku',\n  'Kureru', // Kamiya section 7.17\n  'Kudasaru',\n  'TeIru',  // 7.5 - 7.6\n  'TeAru',  // 7.7\n  'Miru',   // 7.22\n  'Iku',    // 7.23\n  'Kuru',   // 7.24\n  'Oku',    // 7.25\n  'Shimau', // 7.26\n  'TeOru',  // Not in Kamiya\n] as const;\nexport type Auxiliary = typeof auxiliaries[number];\n\nconst specialCasesRaw: Array<[string, Conjugation, string]> = [\n  ['\u3042\u308B', 'Negative', ''], // fully negative conjugation would be ''+nai\n  ['\u3054\u3056\u308B', 'Conjunctive', '\u3054\u3056\u3044'],\n  ['\u3044\u3089\u3063\u3057\u3083\u308B', 'Conjunctive', '\u3044\u3089\u3063\u3057\u3083\u3044'],\n  ['\u3044\u3089\u3063\u3057\u3083\u308B', 'Conditional', '\u3044\u3089\u3063\u3057\u3083\u3044'],\n  ['\u3044\u3089\u3063\u3057\u3083\u308B', 'Imperative', '\u3044\u3089\u3063\u3057\u3083\u3044'],\n];\nlet specialCases: Map<string, Map<Conjugation, string>> = new Map([]);\nfor (const [verb, conj, result] of specialCasesRaw) {\n  let outer = specialCases.get(verb);\n  if (outer) {\n    outer.set(conj, result);\n  } else {\n    specialCases.set(verb, new Map([[conj, result]]));\n  }\n}\nconst conjToIdx: Map<Conjugation, number> =\n    new Map(conjugations.filter(x => x !== 'Imperative').map((x, i) => [x, i]) as Array<[Conjugation, number]>);\nconjToIdx.set('Zu', conjToIdx.get('Negative') ?? -1);\n\nconst tteRaw: Array<[string, string[]]> = [\n  ['\u304F', ['\u3044\u3066', '\u3044\u305F', '\u3044\u305F\u3089', '\u3044\u305F\u308A']],\n  ['\u3050', ['\u3044\u3067', '\u3044\u3060', '\u3044\u3060\u3089', '\u3044\u3060\u308A']],\n  ['\u3059', ['\u3057\u3066', '\u3057\u305F', '\u3057\u305F\u3089', '\u3057\u305F\u308A']],\n  ['\u306C', ['\u3093\u3067', '\u3093\u3060', '\u3093\u3060\u3089', '\u3093\u3060\u308A']],\n  ['\u3076', ['\u3093\u3067', '\u3093\u3060', '\u3093\u3060\u3089', '\u3093\u3060\u308A']], // same as above\n  ['\u3080', ['\u3093\u3067', '\u3093\u3060', '\u3093\u3060\u3089', '\u3093\u3060\u308A']], // ditto\n  ['\u3064', ['\u3063\u3066', '\u3063\u305F', '\u3063\u305F\u3089', '\u3063\u305F\u308A']],\n  ['\u308B', ['\u3063\u3066', '\u3063\u305F', '\u3063\u305F\u3089', '\u3063\u305F\u308A']], // same as above and below\n  ['\u3046', ['\u3063\u3066', '\u3063\u305F', '\u3063\u305F\u3089', '\u3063\u305F\u308A']],\n];\nlet tte: Map<string, string[]> = new Map([]);\nfor (const [tail, quad] of tteRaw) { tte.set(tail, quad); }\n\nexport function conjugateTypeI(verb: string, conj: Conjugation): string[] {\n  {\n    if (verb === '\u3059\u308B') {\n      return conjugateSuru(verb, conj);\n    } else if (verb === '\u304F\u308B' || verb === '\u6765\u308B') {\n      return conjugateKuru(verb, conj);\n    } else if (verb === '\u3060') {\n      return conjugateDa(verb, conj);\n    } else if (verb === '\u3067\u3059') {\n      return conjugateDesu(verb, conj);\n    } else if (verb.endsWith('\u304F\u3060\u3055\u308B')) {\n      if (conj === 'Dictionary') {\n        return [verb];\n      } else if (conj === 'Conjunctive') {\n        return [verb.slice(0, -2) + '\u3055\u3044'];\n      } else {\n        throw new Error('unknown conjugation for -kudasaru');\n      }\n    }\n    const specialHit = specialCases.get(verb);\n    if (specialHit && specialHit.has(conj)) { return [specialHit.get(conj) || '']; }\n    // The above inner-most `get` is guaranteed to be not-undefined, so the empty string will never be returned, but\n    // TypeScript 3.0.1 doesn't treat `Map.has` as a type guard \uD83D\uDE23.\n  }\n  const head = verb.slice(0, -1);\n  const tail = verb.slice(-1);\n  const idx = conjToIdx.get(conj === 'Imperative' ? 'Conditional' : conj);\n  if (typeof idx === 'undefined') { throw new Error('Conjugation not yet implemented'); }\n  if (idx < 5) {\n    if (tail === '\u3046') {\n      if (idx === 0) { return [head + '\u308F']; }\n      return [head + lookup('\u3042', idx)];\n    }\n    return [head + lookup(tail, idx)];\n  }\n  const tidx = idx - 5;\n  const tteHit = tte.get((verb === '\u884C\u304F' || verb === '\u3044\u304F') ? '\u3064' : tail);\n  if (!tteHit) { throw new Error('Unknown verb ending. Is it in dictionary form?'); }\n  return [head + tteHit[tidx]];\n}\n\nexport function conjugateTypeII(verb: string, conj: Conjugation): string[] {\n  if (verb === '\u3059\u308B') {\n    return conjugateSuru(verb, conj);\n  } else if (verb === '\u304F\u308B' || verb === '\u6765\u308B') {\n    return conjugateKuru(verb, conj);\n  } else if (verb === '\u3060') {\n    return conjugateDa(verb, conj);\n  } else if (verb === '\u3067\u3059') {\n    return conjugateDesu(verb, conj);\n  }\n  const head = verb.slice(0, -1);\n  switch (conj) {\n  case 'Negative':\n  case 'Zu': return [head];\n  case 'Conjunctive': return [head];\n  case 'Dictionary': return [verb];\n  case 'Conditional': return [head + '\u308C'];\n  case 'Imperative': return [head + '\u308D', head + '\u3088'];\n  case 'Volitional': return [head + '\u3088\u3046'];\n  case 'Te': return [head + '\u3066'];\n  case 'Ta': return [head + '\u305F'];\n  case 'Tara': return [head + '\u305F\u3089'];\n  case 'Tari': return [head + '\u305F\u308A'];\n  default: throw new Error('Unhandled conjugation');\n  }\n}\n\nfunction conjugateKuru(verb: string, conj: Conjugation): string[] {\n  let ret = '';\n  switch (conj) {\n  case 'Negative':\n  case 'Zu': ret = '\u3053'; break;\n  case 'Conjunctive': ret = '\u304D'; break;\n  case 'Dictionary': ret = '\u304F\u308B'; break;\n  case 'Conditional': ret = '\u304F\u308C'; break;\n  case 'Imperative': ret = '\u3053\u3044'; break;\n  case 'Volitional': ret = '\u3053\u3088\u3046'; break;\n  case 'Te': ret = '\u304D\u3066'; break;\n  case 'Ta': ret = '\u304D\u305F'; break;\n  case 'Tara': ret = '\u304D\u305F\u3089'; break;\n  case 'Tari': ret = '\u304D\u305F\u308A'; break;\n  default: throw new Error('Unhandled conjugation');\n  }\n  const head = verb.slice(0, -1);\n  if (head === '\u304F') {\n    return [ret];\n  } else if (head === '\u6765') {\n    return ['\u6765' + ret.slice(1)];\n  }\n  throw new Error('Expected input to be \u6765\u308B or \u304F\u308B');\n}\n\nfunction conjugateSuru(verb: string, conj: Conjugation): string[] {\n  switch (conj) {\n  case 'Negative': return ['\u3057'];\n  case 'Conjunctive': return ['\u3057'];\n  case 'Dictionary': return ['\u3059\u308B'];\n  case 'Conditional': return ['\u3059\u308C'];\n  case 'Imperative': return ['\u3057\u308D', '\u305B\u3088'];\n  case 'Volitional': return ['\u3057\u3088\u3046'];\n  case 'Te': return ['\u3057\u3066'];\n  case 'Ta': return ['\u3057\u305F'];\n  case 'Tara': return ['\u3057\u305F\u3089'];\n  case 'Tari': return ['\u3057\u305F\u308A'];\n  case 'Zu': return ['\u305B\u305A'];\n  default: throw new Error('Unhandled conjugation');\n  }\n}\nfunction conjugateDa(_verb: string, conj: Conjugation): string[] {\n  switch (conj) {\n  case 'Negative': return ['\u3067\u306A\u3044', '\u3067\u306F\u306A\u3044', '\u3058\u3083\u306A\u3044'];\n  case 'Dictionary': return ['\u3060'];\n  case 'Conditional': return ['\u306A\u3089'];\n  // case 'Presumptive': return ['\u3060\u308D\u3046']; // omitting this\n  case 'Te': return ['\u3067'];\n  case 'Ta': return ['\u3060\u3063\u305F'];\n  case 'Tara': return ['\u3060\u3063\u305F\u3089'];\n  case 'Tari': return ['\u3060\u3063\u305F\u308A'];\n  default: throw new Error('Unhandled conjugation');\n  }\n}\nfunction conjugateDesu(_verb: string, conj: Conjugation): string[] {\n  switch (conj) {\n  case 'Negative': return ['\u3067\u3042\u308A\u307E\u305B\u3093', '\u3067\u306F\u3042\u308A\u307E\u305B\u3093'];\n  case 'Dictionary': return ['\u3067\u3059'];\n  // case 'Presumptive': return ['\u3067\u305D\u3046']; // omitting this\n  case 'Te': return ['\u3067\u3057\u3066'];\n  case 'Ta': return ['\u3067\u3057\u305F'];\n  case 'Tara': return ['\u3067\u3057\u305F\u3089'];\n  case 'Tari': return ['\u3067\u3057\u305F\u308A'];\n  default: throw new Error('Unhandled conjugation');\n  }\n}\n\nfunction conjugateStrict(verb: string, conj: Conjugation, typeII: boolean = false): string[] {\n  return ((verb.slice(-1) === '\u308B' && typeII) ? conjugateTypeII : conjugateTypeI)(verb, conj);\n}\n\nexport function conjugate(verb: string, conj: Conjugation, typeII = false): string[] {\n  const ret = conjugateStrict(verb, conj, typeII);\n\n  if ((conj === 'Negative' || conj === 'Zu') && (verb !== '\u3060' && verb !== '\u3067\u3059')) {\n    // Don't do this for da/desu because their negatives are baked in\n    ret.push(ret[0] + (conj === 'Negative' ? '\u306A\u3044' : '\u305A'));\n  } else if (conj === 'Conjunctive') {\n    ret.push(ret[0] + '\u307E\u3059');\n  } else if (conj === 'Conditional') {\n    ret.push(ret[0] + '\u3070');\n  } else if (conj === 'Volitional') {\n    ret.push(ret[0] + '\u3046');\n  }\n\n  return ret;\n}\n\nexport function conjugateAuxiliaries(initialVerb: string, auxs: Auxiliary[], finalConj: Conjugation,\n                                     initialTypeII: boolean = false): string[] {\n\n  if (auxs.length === 0) { return conjugate(initialVerb, finalConj, initialTypeII); }\n\n  if (initialVerb === '\u3060' || initialVerb === '\u3067\u3059') {\n    if (auxs.length === 1 && auxs[0] === 'Nai') {\n      if (finalConj === 'Ta') {\n        if (initialVerb === '\u3060') {\n          return ['\u3067\u306F\u306A\u304B\u3063\u305F', '\u3058\u3083\u306A\u304B\u3063\u305F'];\n        } else {\n          return ['\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F', '\u3067\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F'];\n        }\n      } else if (finalConj === 'Te' && initialVerb === '\u3060') {\n        return ['\u3058\u3083\u306A\u304F\u3066'];\n      }\n    }\n    throw new Error('unhandled copula auxiliaries/conjugation');\n  }\n\n  let verbs: string[] = [initialVerb];\n  let typeII = initialTypeII;\n  for (const [auxIdx, aux] of auxs.entries()) {\n    const conj: Conjugation = auxIdx === auxs.length - 1 ? finalConj : 'Dictionary';\n    const prevAux: Auxiliary|undefined = auxs[auxIdx - 1];\n\n    if (auxIdx !== auxs.length - 1 && (aux === 'Masu' || aux === 'Nai' || aux === 'Tai' || aux == 'Hoshii' ||\n                                       aux === 'Rashii' || aux === 'SoudaConjecture' || aux === 'SoudaHearsay')) {\n      throw new Error('must be final auxiliary');\n    }\n\n    if (prevAux === 'Kuru') {\n      // While `conjugate` looks for with Kudasaru with `endsWith`, it looks for Kuru with exact-compare (because\n      // potentially lots of things could end in kuru)\n      const heads = verbs.map(s => s.slice(0, -2));\n      const tails = conjugateAuxiliary('\u304F\u308B', aux, conj);\n      verbs = heads.flatMap(prefix => tails.map(t => prefix + t));\n    } else {\n      verbs = verbs.flatMap(verb => conjugateAuxiliary(verb, aux, conj, typeII));\n    }\n    typeII = aux === 'Potential' || aux === 'SeruSaseru' || aux === 'ReruRareru' || aux === 'CausativePassive' ||\n             aux === 'ShortenedCausativePassive' || aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Kureru' ||\n             aux === 'Miru' || aux === 'TeIru';\n  }\n  return verbs;\n}\n\nfunction conjugateAuxiliary(verb: string, aux: Auxiliary, conj: Conjugation, typeII: boolean = false): string[] {\n  if (aux === 'Potential') {\n    const newverb = conjugateTypeI(verb, 'Conditional')[0] + '\u308B';\n    return conjugate(newverb, conj, true);\n  } else if (aux === 'Masu') {\n    const base = conjugate(verb, 'Conjunctive', typeII)[0];\n    switch (conj) {\n    case 'Negative': return [base + '\u307E\u305B\u3093', base + '\u307E\u305B\u3093\u3067\u3057\u305F'];\n    // case 'Conjunctive':\n    case 'Dictionary': return [base + '\u307E\u3059'];\n    case 'Conditional': return [base + '\u307E\u3059\u308C\u3070'];\n    case 'Imperative': return [base + '\u307E\u305B', base + '\u307E\u3057']; // latter only for nasaru and ossharu\n    case 'Volitional': return [base + '\u307E\u3057\u3087\u3046'];\n    case 'Te': return [base + '\u307E\u3057\u3066'];\n    case 'Ta': return [base + '\u307E\u3057\u305F'];\n    case 'Tara': return [base + '\u307E\u3057\u305F\u3089'];\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'Nai') {\n    const base = conjugate(verb, 'Negative', typeII)[0];\n    switch (conj) {\n    case 'Negative': return [base + '\u306A\u304F\u306F\u306A\u3044'];\n    case 'Conjunctive': return [base + '\u306A\u304F'];\n    case 'Dictionary': return [base + '\u306A\u3044'];\n    case 'Conditional': return [base + '\u306A\u3051\u308C\u3070'];\n    // case 'Imperative':\n    // case 'Volitional':\n    case 'Te': return [base + '\u306A\u304F\u3066', base + '\u306A\u3044\u3067']; // only the first is in Kamiya\n    case 'Ta': return [base + '\u306A\u304B\u3063\u305F'];\n    case 'Tara': return [base + '\u306A\u304B\u3063\u305F\u3089'];\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'Tai') {\n    const base = conjugate(verb, 'Conjunctive', typeII)[0];\n    switch (conj) {\n    case 'Negative': return [base + '\u305F\u304F\u306A\u3044'];\n    case 'Conjunctive': return [base + '\u305F\u304F'];\n    case 'Dictionary': return [base + '\u305F\u3044'];\n    case 'Conditional': return [base + '\u305F\u3051\u308C\u3070'];\n    // case 'Imperative':\n    // case 'Volitional':\n    case 'Te': return [base + '\u305F\u304F\u3066'];\n    case 'Ta': return [base + '\u305F\u304B\u3063\u305F'];\n    case 'Tara': return [base + '\u305F\u304B\u3063\u305F\u3089'];\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'Tagaru') {\n    switch (conj) {\n    case 'Conditional':\n    case 'Imperative':\n    case 'Volitional':\n    case 'Tari': throw new Error('Unhandled conjugation');\n    }\n    const bases = conjugate(verb, 'Conjunctive', typeII);\n    const tagaruConj = conjugate('\u305F\u304C\u308B', conj, false);\n    return tagaruConj.map(suffix => bases[0] + suffix);\n  } else if (aux === 'Hoshii') {\n    const base = conjugate(verb, 'Te', typeII)[0];\n    switch (conj) {\n    case 'Negative': return [base + '\u307B\u3057\u304F\u306A\u3044'];\n    case 'Conjunctive': return [base + '\u307B\u3057\u304F'];\n    case 'Dictionary': return [base + '\u307B\u3057\u3044'];\n    case 'Conditional': return [base + '\u307B\u3057\u3051\u308C\u3070'];\n    // case 'Imperative':\n    // case 'Volitional':\n    case 'Te': return [base + '\u307B\u3057\u304F\u3066'];\n    case 'Ta': return [base + '\u307B\u3057\u304B\u3063\u305F'];\n    case 'Tara': return [base + '\u307B\u3057\u304B\u3063\u305F\u3089'];\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'Rashii') {\n    const base1 = conjugate(verb, 'Ta', typeII)[0];\n    const base2 = verb;\n    const append = (suffix: string) => [base1, base2].map(prefix => prefix + suffix);\n    switch (conj) {\n    case 'Negative': const neg = conjugateAuxiliary(verb, 'Nai', 'Dictionary')[0]; return [neg + '\u3089\u3057\u3044'];\n    case 'Conjunctive': return append('\u3089\u3057\u304F');\n    case 'Dictionary': return append('\u3089\u3057\u3044');\n    // case 'Conditional':\n    // case 'Imperative':\n    // case 'Volitional':\n    case 'Te': return append('\u3089\u3057\u304F\u3066');\n    // case 'Ta':\n    // case 'Tara':\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'SoudaHearsay') {\n    const base1 = conjugate(verb, 'Ta', typeII)[0];\n    const base2 = verb; // dictionary form\n    const append = (suffix: string) => [base1, base2].map(prefix => prefix + suffix);\n    switch (conj) {\n    // case 'Negative':\n    // case 'Conjunctive':\n    case 'Dictionary': return append('\u305D\u3046\u3060');\n    // case 'Conditional':\n    // case 'Imperative':\n    // case 'Volitional':\n    // case 'Te':\n    // case 'Ta':\n    // case 'Tara':\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'SoudaConjecture') {\n    const base = conjugate(verb, 'Conjunctive', typeII)[0];\n    switch (conj) {\n    // case 'Negative':\n    // case 'Conjunctive':\n    case 'Dictionary': return [base + '\u305D\u3046\u3060', base + '\u305D\u3046\u3067\u3059'];\n    case 'Conditional': return [base + '\u305D\u3046\u306A\u3089'];\n    // case 'Imperative':\n    // case 'Volitional':\n    // case 'Te':\n    case 'Ta': return [base + '\u305D\u3046\u3060\u3063\u305F', base + '\u305D\u3046\u3067\u3057\u305F'];\n    // case 'Tara':\n    // case 'Tari':\n    default: throw new Error('Unhandled conjugation');\n    }\n  } else if (aux === 'SeruSaseru' || aux === 'ShortenedCausative') {\n    if (conj === 'Tara' || conj === 'Tari') { throw new Error('Unhandled conjugation'); }\n    let newverb;\n    if (verb === '\u6765\u308B' || verb === '\u304F\u308B') {\n      newverb = (verb[0] === '\u6765' ? '\u6765' : '\u3053') + '\u3055\u305B\u308B';\n    } else if (verb === '\u3059\u308B') {\n      newverb = '\u3055\u305B\u308B';\n    } else if (typeII) {\n      newverb = conjugateTypeII(verb, 'Negative')[0] + '\u3055\u305B\u308B';\n    } else { // type I\n      newverb = conjugateTypeI(verb, 'Negative')[0] + '\u305B\u308B';\n    }\n    if (aux === 'ShortenedCausative') {\n      newverb = newverb.slice(0, -2) + '\u3059';\n      return conjugate(newverb, conj, false);\n    }\n    return conjugate(newverb, conj, true);\n  } else if (aux === 'ReruRareru') {\n    if (conj === 'Conditional' || conj === 'Imperative' || conj === 'Volitional' || conj === 'Tara' ||\n        conj === 'Tari') {\n      throw new Error('Unhandled conjugation');\n    }\n    let newverb;\n    if (verb === '\u6765\u308B' || verb === '\u304F\u308B') {\n      newverb = (verb[0] === '\u6765' ? '\u6765' : '\u3053') + '\u3089\u308C\u308B';\n    } else if (verb === '\u3059\u308B') {\n      newverb = '\u3055\u308C\u308B';\n    } else if (typeII) {\n      newverb = conjugateTypeII(verb, 'Negative')[0] + '\u3089\u308C\u308B';\n    } else { // type I\n      newverb = conjugateTypeI(verb, 'Negative')[0] + '\u308C\u308B';\n    }\n    return conjugate(newverb, conj, true);\n  } else if (aux === 'CausativePassive') {\n    const newverb = conjugateAuxiliary(verb, 'SeruSaseru', 'Negative', typeII)[0] + '\u3089\u308C\u308B';\n    return conjugate(newverb, conj, true);\n  } else if (aux === 'ShortenedCausativePassive') {\n    const newverb = conjugateAuxiliary(verb, 'ShortenedCausative', 'Negative', typeII)[0] + '\u308C\u308B';\n    return conjugate(newverb, conj, true);\n  } else if (aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Yaru' || aux === 'Morau' || aux === 'Itadaku' ||\n             aux === 'Kureru' || aux === 'Kudasaru' || aux === 'TeIru' || aux === 'TeAru' || aux === 'Miru' ||\n             aux === 'Iku' || aux === 'Kuru' || aux === 'Oku' || aux === 'TeOru') {\n    const vte = conjugate(verb, 'Te', typeII)[0];\n    const endings: string[] = aux === 'Ageru'        ? ['\u3042\u3052\u308B']\n                              : aux === 'Sashiageru' ? ['\u5DEE\u3057\u4E0A\u3052\u308B', '\u3055\u3057\u3042\u3052\u308B']\n                              : aux === 'Yaru'       ? ['\u3084\u308B']\n                              : aux === 'Morau'      ? ['\u3082\u3089\u3046']\n                              : aux === 'Itadaku'    ? ['\u3044\u305F\u3060\u304F']\n                              : aux === 'Kureru'     ? ['\u304F\u308C\u308B']\n                              : aux === 'Kudasaru'   ? ['\u304F\u3060\u3055\u308B']\n                              : aux === 'TeIru'      ? ['\u3044\u308B', '\u308B']\n                              : aux === 'TeAru'      ? ['\u3042\u308B']\n                              : aux === 'Miru'       ? ['\u307F\u308B']\n                              : aux === 'Iku'        ? ['\u3044\u304F']\n                              : aux === 'Kuru'       ? ['\u304F\u308B']\n                              : aux === 'Oku'        ? ['\u304A\u304F']\n                              : aux === 'TeOru'      ? ['\u304A\u308B']\n                                                     : [];\n    if (!endings[0]) { throw new Error('missing ternary'); }\n    if (aux === 'Kuru') { return conjugate(endings[0], conj).map(suffix => vte + suffix); }\n    const endingTypeII: boolean =\n        aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Kureru' || aux === 'TeIru' || aux === 'Miru';\n    const newVerbs = endings.map(ending => vte + ending);\n    if (aux === 'Oku') { newVerbs.push(vte.slice(0, -1) + '\u3068\u304F'); }\n    return newVerbs.flatMap(v => conjugate(v, conj, endingTypeII));\n  } else if (aux === 'Shimau') {\n    const vte = conjugate(verb, 'Te', typeII)[0];\n    const shimau = conjugate(vte + '\u3057\u307E\u3046', conj);\n    const noTe = vte.slice(0, -1);\n    // see https://www.sljfaq.org/afaq/colloquial-contractions.html\n    if (vte.endsWith('\u3066')) {\n      // no rendaku\n      const chau = conjugate(noTe + '\u3061\u3083\u3046', conj);\n      const chimau = conjugate(noTe + '\u3061\u307E\u3046', conj);\n      return shimau.concat(chau).concat(chimau);\n    }\n    const jimau = conjugate(noTe + '\u3058\u307E\u3046', conj);\n    const dimau = conjugate(noTe + '\u3062\u307E\u3046', conj);\n    return shimau.concat(jimau).concat(dimau);\n  }\n  isNever(aux);\n  throw new Error('Unhandled auxiliary')\n}\nfunction isNever(x: never) { return x; }\n\nexport interface Deconjugated {\n  auxiliaries: Auxiliary[];\n  conjugation: Conjugation;\n  result: string[];\n}\nexport function verbDeconjugate(conjugated: string, dictionaryForm: string, typeII = false,\n                                maxAuxDepth = Infinity): Deconjugated[] {\n  const hits: Deconjugated[] = [];\n\n  for (const conj of conjugations) {\n    try {\n      const result = conjugate(dictionaryForm, conj, typeII);\n      if (result.includes(conjugated)) { hits.push({conjugation: conj, auxiliaries: [], result}) }\n    } catch {}\n  }\n\n  if (maxAuxDepth <= 0) { return hits; }\n\n  for (const aux of auxiliaries) {\n    for (const conj of conjugations) {\n      try {\n        const result = conjugateAuxiliary(dictionaryForm, aux, conj, typeII);\n        if (result.includes(conjugated)) { hits.push({conjugation: conj, auxiliaries: [aux], result}) }\n      } catch {}\n    }\n  }\n\n  if (maxAuxDepth <= 1) { return hits; }\n\n  const penultimates: Auxiliary[] = [\n    'Ageru', 'Sashiageru', 'Yaru', 'Morau', 'Itadaku', 'Kureru', 'Kudasaru', 'Miru', 'Iku', 'Kuru', 'Oku', 'Shimau',\n    'TeIru', 'TeAru', 'TeOru', 'Potential', 'ReruRareru', 'SeruSaseru'\n  ];\n  const depth2Finals: Auxiliary[] = ['Masu', 'SoudaConjecture', 'SoudaHearsay', 'TeIru', 'Tai'];\n  for (const penultimate of penultimates) {\n    for (const final of depth2Finals) {\n      for (const conj of conjugations) {\n        const auxs = [penultimate, final];\n        try {\n          const result = conjugateAuxiliaries(dictionaryForm, auxs, conj, typeII);\n          if (result.includes(conjugated)) { hits.push({conjugation: conj, auxiliaries: auxs, result}); }\n        } catch {}\n      }\n    }\n  }\n\n  if (maxAuxDepth <= 2) { return hits; }\n\n  const antepenultimates: Auxiliary[] = [\n    'SeruSaseru',\n    'ReruRareru',\n    'Itadaku',\n  ];\n  const depth3Finals: Auxiliary[] = ['Masu'];\n  for (const ante of antepenultimates) {\n    for (const penultimate of penultimates) {\n      for (const final of depth3Finals) {\n        for (const conj of conjugations) {\n          const auxs = [ante, penultimate, final];\n          try {\n            const result = conjugateAuxiliaries(dictionaryForm, auxs, conj, typeII);\n            if (result.includes(conjugated)) { hits.push({conjugation: conj, auxiliaries: auxs, result}); }\n          } catch {}\n        }\n      }\n    }\n  }\n\n  return hits;\n}\n\nexport {\n  adjConjugations,\n  adjConjugate,\n  adjDeconjugate,\n} from './adjective';\n\nexport type{\n  AdjConjugation,\n  AdjDeconjugated,\n} from './adjective';\n", "const split = (s: string) => s.split('');\nconst vec = [\n  split('\u3042\u3044\u3046\u3048\u304A'),\n  split('\u304B\u304D\u304F\u3051\u3053'),\n  split('\u304C\u304E\u3050\u3052\u3054'),\n  split('\u3055\u3057\u3059\u305B\u305D'),\n  split('\u3056\u3058\u305A\u305C\u305E'),\n  split('\u305F\u3061\u3064\u3066\u3068'),\n  split('\u3060\u3062\u3065\u3067\u3069'),\n  split('\u306A\u306B\u306C\u306D\u306E'),\n  split('\u306F\u3072\u3075\u3078\u307B'),\n  split('\u3070\u3073\u3076\u3079\u307C'),\n  split('\u3071\u3074\u3077\u307A\u307D'),\n  split('\u307E\u307F\u3080\u3081\u3082'),\n  ['\u3084', '', '\u3086', '', '\u3088'],\n  split('\u3089\u308A\u308B\u308C\u308D'),\n  ['\u308F', '', '', '', '\u3092'],\n  ['\u3093', '', '', '', ''],\n];\nlet charToVecIndex: Map<String, number> = new Map([]);\nvec.forEach((row, rowidx) => {\n  row.forEach(char => {\n    if (char.length > 0) { charToVecIndex.set(char, rowidx) }\n  });\n});\nexport function lookup(character: String, vowel: number): String {\n  if (vowel < 0 || vowel > 4) { throw new Error('vowel must be between 0 and 4'); }\n  const idx = charToVecIndex.get(character);\n  if (typeof idx === 'undefined') { throw new Error('unknown character'); }\n  const ret = vec[idx][vowel];\n  if (ret.length === 0) { throw new Error('vowel for kana does not exist'); }\n  return ret;\n}", "export const adjConjugations = [\n  'Present', 'Prenomial', 'Negative', 'Past', 'NegativePast', 'ConjunctiveTe', 'Adverbial', 'Conditional',\n  'TaraConditional', 'Tari', 'Noun', 'StemSou', 'StemNegativeSou'\n] as const;\nexport type AdjConjugation = typeof adjConjugations[number];\n\nfunction never(x: never) { throw new Error('never?'); }\n\nexport function adjConjugate(adjective: string, conj: AdjConjugation, iAdjective: boolean): string[] {\n  if (iAdjective) {\n    let stem = adjective.slice(0, -1);\n    let addSa = false;\n    if (adjective === '\u3044\u3044' || adjective === '\u826F\u3044' || adjective === '\u3088\u3044') {\n      stem = adjective.startsWith('\u826F') ? '\u826F' : '\u3088';\n      addSa = true;\n    }else if (adjective.endsWith('\u306A\u3044')) {\n      addSa = true;\n    }\n    switch (conj) {\n    case 'Present': return [adjective];\n    case 'Prenomial': return [adjective];\n    case 'Negative': return [stem + '\u304F\u306A\u3044'];\n    case 'Past': return [stem + '\u304B\u3063\u305F'];\n    case 'NegativePast': return [stem + '\u304F\u306A\u304B\u3063\u305F'];\n    case 'ConjunctiveTe': return [stem + '\u304F', stem + '\u304F\u3066'];\n    case 'Adverbial': return [stem + '\u304F'];\n    case 'Conditional': return [stem + '\u3051\u308C\u3070'];\n    case 'TaraConditional': return [stem + '\u304B\u3063\u305F\u3089'];\n    case 'Tari': return [stem + '\u304B\u3063\u305F\u308A'];\n    case 'Noun': return [stem + '\u3055'];\n    case 'StemSou': return [addSa ? stem + '\u3055\u305D\u3046' : stem + '\u305D\u3046'];\n    case 'StemNegativeSou': {\n      const negativeStem = stem + '\u304F\u306A';\n      // basically conjugate adjective with 'Negative' and redo stem\n      return [negativeStem + '\u3055\u305D\u3046'];\n    }\n    default: never(conj);\n    }\n  }\n  // na-adjective\n  switch (conj) {\n  case 'Prenomial': return [adjective + '\u306A'];\n  case 'Present': return ['\u3060', '\u3067\u3059', '\u3067\u3054\u3056\u3044\u307E\u3059'].map(suffix => adjective + suffix);\n  case 'Negative': return ['\u3067\u306F\u306A\u3044', '\u3067\u306A\u3044', '\u3058\u3083\u306A\u3044', '\u3067\u306F\u3042\u308A\u307E\u305B\u3093'].map(suffix => adjective + suffix);\n  case 'Past': return ['\u3060\u3063\u305F', '\u3067\u3057\u305F'].map(suffix => adjective + suffix);\n  case 'NegativePast':\n    return ['\u3067\u306F\u306A\u304B\u3063\u305F', '\u3067\u306A\u304B\u3063\u305F', '\u3058\u3083\u306A\u304B\u3063\u305F', '\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F'].map(suffix => adjective + suffix);\n  case 'ConjunctiveTe': return [adjective + '\u3067'];\n  case 'Adverbial': return [adjective + '\u306B'];\n  case 'Conditional': return ['\u306A\u3089', '\u306A\u3089\u3070'].map(suffix => adjective + suffix);\n  case 'TaraConditional': return ['\u3060\u3063\u305F\u3089'].map(suffix => adjective + suffix);\n  case 'Tari': return ['\u3060\u3063\u305F\u308A', '\u3067\u3057\u305F\u308A'].map(suffix => adjective + suffix);\n  case 'Noun': return [adjective + '\u3055'];\n  case 'StemSou': return [adjective + '\u305D\u3046'];\n  case 'StemNegativeSou': return [adjective + '\u3058\u3083\u306A\u3055\u305D\u3046'];\n  default: never(conj);\n  }\n\n  throw new Error('unknown conjugation/iAdjective');\n}\n\nexport interface AdjDeconjugated {\n  conjugation: AdjConjugation;\n  result: string[];\n}\nexport function adjDeconjugate(conjugated: string, dictionary: string, iAdjective: boolean): AdjDeconjugated[] {\n  const hits: AdjDeconjugated[] = [];\n  for (const conj of adjConjugations) {\n    const result = adjConjugate(dictionary, conj, iAdjective);\n    if (result.includes(conjugated)) { hits.push({conjugation: conj, result}) }\n  }\n  return hits;\n}"],
  "mappings": "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",
  "names": []
}
