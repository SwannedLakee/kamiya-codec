{
  "version": 3,
  "sources": ["../index.ts", "../hiragana.ts", "../adjective.ts"],
  "sourcesContent": ["import { lookup } from \"./hiragana\";\n\nexport const conjugations = [\n  \"Negative\",\n  \"Conjunctive\",\n  \"Dictionary\",\n  \"Conditional\",\n  \"Imperative\",\n  \"Volitional\",\n  \"Te\",\n  \"Ta\",\n  \"Tara\",\n  \"Tari\",\n  \"Zu\", // Not in Kamiya: classical negative\n  \"Nu\", // Not in Kamiya: classical negative (attributive form of Zu)\n] as const;\nexport type Conjugation = (typeof conjugations)[number];\n\nexport const auxiliaries = [\n  \"Potential\",\n  \"Masu\",\n  \"Nai\",\n  \"Tai\",\n  \"Tagaru\",\n  \"Hoshii\",\n  \"Rashii\",\n  \"SoudaHearsay\",\n  \"SoudaConjecture\",\n  \"SeruSaseru\",\n  \"ShortenedCausative\",\n  \"ReruRareru\",\n  \"CausativePassive\",\n  \"ShortenedCausativePassive\",\n  \"Ageru\", // Kamiya section 7.15\n  \"Sashiageru\",\n  \"Yaru\",\n  \"Morau\", // Kamiya section 7.16\n  \"Itadaku\",\n  \"Kureru\", // Kamiya section 7.17\n  \"Kudasaru\",\n  \"TeIru\", // 7.5 - 7.6\n  \"TeAru\", // 7.7\n  \"Miru\", // 7.22\n  \"Iku\", // 7.23\n  \"Kuru\", // 7.24\n  \"Oku\", // 7.25\n  \"Shimau\", // 7.26\n  \"TeOru\", // Not in Kamiya\n] as const;\nexport type Auxiliary = (typeof auxiliaries)[number];\n\nconst specialCasesRaw: Array<[string, Conjugation, string]> = [\n  [\"\u3042\u308B\", \"Negative\", \"\"], // fully negative conjugation would be ''+nai\n  [\"\u3054\u3056\u308B\", \"Conjunctive\", \"\u3054\u3056\u3044\"],\n  [\"\u3044\u3089\u3063\u3057\u3083\u308B\", \"Conjunctive\", \"\u3044\u3089\u3063\u3057\u3083\u3044\"],\n  [\"\u3044\u3089\u3063\u3057\u3083\u308B\", \"Conditional\", \"\u3044\u3089\u3063\u3057\u3083\u3044\"],\n  [\"\u3044\u3089\u3063\u3057\u3083\u308B\", \"Imperative\", \"\u3044\u3089\u3063\u3057\u3083\u3044\"],\n];\nlet specialCases: Map<string, Map<Conjugation, string>> = new Map([]);\nfor (const [verb, conj, result] of specialCasesRaw) {\n  let outer = specialCases.get(verb);\n  if (outer) {\n    outer.set(conj, result);\n  } else {\n    specialCases.set(verb, new Map([[conj, result]]));\n  }\n}\nconst conjToIdx: Map<Conjugation, number> = new Map(\n  conjugations.filter((x) => x !== \"Imperative\").map((x, i) => [x, i]) as Array<\n    [Conjugation, number]\n  >,\n);\nconjToIdx.set(\"Zu\", conjToIdx.get(\"Negative\") ?? -1);\nconjToIdx.set(\"Nu\", conjToIdx.get(\"Negative\") ?? -1);\n\nconst tteRaw: Array<[string, string[]]> = [\n  [\"\u304F\", [\"\u3044\u3066\", \"\u3044\u305F\", \"\u3044\u305F\u3089\", \"\u3044\u305F\u308A\"]],\n  [\"\u3050\", [\"\u3044\u3067\", \"\u3044\u3060\", \"\u3044\u3060\u3089\", \"\u3044\u3060\u308A\"]],\n  [\"\u3059\", [\"\u3057\u3066\", \"\u3057\u305F\", \"\u3057\u305F\u3089\", \"\u3057\u305F\u308A\"]],\n  [\"\u306C\", [\"\u3093\u3067\", \"\u3093\u3060\", \"\u3093\u3060\u3089\", \"\u3093\u3060\u308A\"]],\n  [\"\u3076\", [\"\u3093\u3067\", \"\u3093\u3060\", \"\u3093\u3060\u3089\", \"\u3093\u3060\u308A\"]], // same as above\n  [\"\u3080\", [\"\u3093\u3067\", \"\u3093\u3060\", \"\u3093\u3060\u3089\", \"\u3093\u3060\u308A\"]], // ditto\n  [\"\u3064\", [\"\u3063\u3066\", \"\u3063\u305F\", \"\u3063\u305F\u3089\", \"\u3063\u305F\u308A\"]],\n  [\"\u308B\", [\"\u3063\u3066\", \"\u3063\u305F\", \"\u3063\u305F\u3089\", \"\u3063\u305F\u308A\"]], // same as above and below\n  [\"\u3046\", [\"\u3063\u3066\", \"\u3063\u305F\", \"\u3063\u305F\u3089\", \"\u3063\u305F\u308A\"]],\n];\nlet tte: Map<string, string[]> = new Map([]);\nfor (const [tail, quad] of tteRaw) {\n  tte.set(tail, quad);\n}\n\nexport function conjugateTypeI(verb: string, conj: Conjugation): string[] {\n  {\n    if (verb === \"\u3059\u308B\") {\n      return conjugateSuru(verb, conj);\n    } else if (verb === \"\u304F\u308B\" || verb === \"\u6765\u308B\") {\n      return conjugateKuru(verb, conj);\n    } else if (verb === \"\u3060\") {\n      return conjugateDa(verb, conj);\n    } else if (verb === \"\u3067\u3059\") {\n      return conjugateDesu(verb, conj);\n    } else if (verb.endsWith(\"\u304F\u3060\u3055\u308B\")) {\n      if (conj === \"Dictionary\") {\n        return [verb];\n      } else if (conj === \"Conjunctive\") {\n        return [verb.slice(0, -2) + \"\u3055\u3044\"];\n      } else {\n        throw new Error(\"unknown conjugation for -kudasaru\");\n      }\n    }\n    const specialHit = specialCases.get(verb);\n    if (specialHit && specialHit.has(conj)) {\n      return [specialHit.get(conj) || \"\"];\n    }\n    // The above inner-most `get` is guaranteed to be not-undefined, so the empty string will never be returned, but\n    // TypeScript 3.0.1 doesn't treat `Map.has` as a type guard \uD83D\uDE23.\n  }\n  const head = verb.slice(0, -1);\n  const tail = verb.slice(-1);\n  const idx = conjToIdx.get(conj === \"Imperative\" ? \"Conditional\" : conj);\n  if (typeof idx === \"undefined\") {\n    throw new Error(\"Conjugation not yet implemented\");\n  }\n  if (idx < 5) {\n    if (tail === \"\u3046\") {\n      if (idx === 0) {\n        return [head + \"\u308F\"];\n      }\n      return [head + lookup(\"\u3042\", idx)];\n    }\n    return [head + lookup(tail, idx)];\n  }\n  const tidx = idx - 5;\n  const tteHit = tte.get(verb === \"\u884C\u304F\" || verb === \"\u3044\u304F\" ? \"\u3064\" : tail);\n  if (!tteHit) {\n    throw new Error(\"Unknown verb ending. Is it in dictionary form?\");\n  }\n  return [head + tteHit[tidx]];\n}\n\nexport function conjugateTypeII(verb: string, conj: Conjugation): string[] {\n  if (verb === \"\u3059\u308B\") {\n    return conjugateSuru(verb, conj);\n  } else if (verb === \"\u304F\u308B\" || verb === \"\u6765\u308B\") {\n    return conjugateKuru(verb, conj);\n  } else if (verb === \"\u3060\") {\n    return conjugateDa(verb, conj);\n  } else if (verb === \"\u3067\u3059\") {\n    return conjugateDesu(verb, conj);\n  }\n  const head = verb.slice(0, -1);\n  switch (conj) {\n    case \"Negative\":\n    case \"Zu\":\n    case \"Nu\":\n      return [head];\n    case \"Conjunctive\":\n      return [head];\n    case \"Dictionary\":\n      return [verb];\n    case \"Conditional\":\n      return [head + \"\u308C\"];\n    case \"Imperative\":\n      return [head + \"\u308D\", head + \"\u3088\"];\n    case \"Volitional\":\n      return [head + \"\u3088\u3046\"];\n    case \"Te\":\n      return [head + \"\u3066\"];\n    case \"Ta\":\n      return [head + \"\u305F\"];\n    case \"Tara\":\n      return [head + \"\u305F\u3089\"];\n    case \"Tari\":\n      return [head + \"\u305F\u308A\"];\n    default:\n      throw new Error(\"Unhandled conjugation\");\n  }\n}\n\nfunction conjugateKuru(verb: string, conj: Conjugation): string[] {\n  let ret = \"\";\n  switch (conj) {\n    case \"Negative\":\n    case \"Zu\":\n    case \"Nu\":\n      ret = \"\u3053\";\n      break;\n    case \"Conjunctive\":\n      ret = \"\u304D\";\n      break;\n    case \"Dictionary\":\n      ret = \"\u304F\u308B\";\n      break;\n    case \"Conditional\":\n      ret = \"\u304F\u308C\";\n      break;\n    case \"Imperative\":\n      ret = \"\u3053\u3044\";\n      break;\n    case \"Volitional\":\n      ret = \"\u3053\u3088\u3046\";\n      break;\n    case \"Te\":\n      ret = \"\u304D\u3066\";\n      break;\n    case \"Ta\":\n      ret = \"\u304D\u305F\";\n      break;\n    case \"Tara\":\n      ret = \"\u304D\u305F\u3089\";\n      break;\n    case \"Tari\":\n      ret = \"\u304D\u305F\u308A\";\n      break;\n    default:\n      throw new Error(\"Unhandled conjugation\");\n  }\n  const head = verb.slice(0, -1);\n  if (head === \"\u304F\") {\n    return [ret];\n  } else if (head === \"\u6765\") {\n    return [\"\u6765\" + ret.slice(1)];\n  }\n  throw new Error(\"Expected input to be \u6765\u308B or \u304F\u308B\");\n}\n\nfunction conjugateSuru(verb: string, conj: Conjugation): string[] {\n  switch (conj) {\n    case \"Negative\":\n      return [\"\u3057\"];\n    case \"Conjunctive\":\n      return [\"\u3057\"];\n    case \"Dictionary\":\n      return [\"\u3059\u308B\"];\n    case \"Conditional\":\n      return [\"\u3059\u308C\"];\n    case \"Imperative\":\n      return [\"\u3057\u308D\", \"\u305B\u3088\"];\n    case \"Volitional\":\n      return [\"\u3057\u3088\u3046\"];\n    case \"Te\":\n      return [\"\u3057\u3066\"];\n    case \"Ta\":\n      return [\"\u3057\u305F\"];\n    case \"Tara\":\n      return [\"\u3057\u305F\u3089\"];\n    case \"Tari\":\n      return [\"\u3057\u305F\u308A\"];\n    case \"Zu\":\n      return [\"\u305B\u305A\"];\n    case \"Nu\":\n      return [\"\u305B\u306C\"];\n    default:\n      throw new Error(\"Unhandled conjugation\");\n  }\n}\nfunction conjugateDa(_verb: string, conj: Conjugation): string[] {\n  switch (conj) {\n    case \"Negative\":\n      return [\"\u3067\u306A\u3044\", \"\u3067\u306F\u306A\u3044\", \"\u3058\u3083\u306A\u3044\"];\n    case \"Dictionary\":\n      return [\"\u3060\"];\n    case \"Conditional\":\n      return [\"\u306A\u3089\"];\n    // case 'Presumptive': return ['\u3060\u308D\u3046']; // omitting this\n    case \"Te\":\n      return [\"\u3067\"];\n    case \"Ta\":\n      return [\"\u3060\u3063\u305F\"];\n    case \"Tara\":\n      return [\"\u3060\u3063\u305F\u3089\"];\n    case \"Tari\":\n      return [\"\u3060\u3063\u305F\u308A\"];\n    default:\n      throw new Error(\"Unhandled conjugation\");\n  }\n}\nfunction conjugateDesu(_verb: string, conj: Conjugation): string[] {\n  switch (conj) {\n    case \"Negative\":\n      return [\"\u3067\u3042\u308A\u307E\u305B\u3093\", \"\u3067\u306F\u3042\u308A\u307E\u305B\u3093\"];\n    case \"Dictionary\":\n      return [\"\u3067\u3059\"];\n    // case 'Presumptive': return ['\u3067\u305D\u3046']; // omitting this\n    case \"Te\":\n      return [\"\u3067\u3057\u3066\"];\n    case \"Ta\":\n      return [\"\u3067\u3057\u305F\"];\n    case \"Tara\":\n      return [\"\u3067\u3057\u305F\u3089\"];\n    case \"Tari\":\n      return [\"\u3067\u3057\u305F\u308A\"];\n    default:\n      throw new Error(\"Unhandled conjugation\");\n  }\n}\n\nfunction conjugateStrict(\n  verb: string,\n  conj: Conjugation,\n  typeII: boolean = false,\n): string[] {\n  return (verb.slice(-1) === \"\u308B\" && typeII ? conjugateTypeII : conjugateTypeI)(\n    verb,\n    conj,\n  );\n}\n\nexport function conjugate(\n  verb: string,\n  conj: Conjugation,\n  typeII = false,\n): string[] {\n  const ret = conjugateStrict(verb, conj, typeII);\n\n  if (\n    (conj === \"Negative\" || conj === \"Zu\" || conj === \"Nu\") &&\n    verb !== \"\u3060\" &&\n    verb !== \"\u3067\u3059\"\n  ) {\n    // Don't do this for da/desu because their negatives are baked in\n    if (conj === \"Negative\") {\n      ret.push(ret[0] + \"\u306A\u3044\");\n    } else if (conj === \"Zu\") {\n      ret.push(ret[0] + \"\u305A\");\n    } else if (conj === \"Nu\") {\n      ret.push(ret[0] + \"\u306C\");\n    }\n  } else if (conj === \"Conjunctive\") {\n    ret.push(ret[0] + \"\u307E\u3059\");\n  } else if (conj === \"Conditional\") {\n    ret.push(ret[0] + \"\u3070\");\n  } else if (conj === \"Volitional\") {\n    ret.push(ret[0] + \"\u3046\");\n  }\n\n  return ret;\n}\n\nexport function conjugateAuxiliaries(\n  initialVerb: string,\n  auxs: Auxiliary[],\n  finalConj: Conjugation,\n  initialTypeII: boolean = false,\n): string[] {\n  if (auxs.length === 0) {\n    return conjugate(initialVerb, finalConj, initialTypeII);\n  }\n\n  if (initialVerb === \"\u3060\" || initialVerb === \"\u3067\u3059\") {\n    if (auxs.length === 1 && auxs[0] === \"Nai\") {\n      if (finalConj === \"Ta\") {\n        if (initialVerb === \"\u3060\") {\n          return [\"\u3067\u306F\u306A\u304B\u3063\u305F\", \"\u3058\u3083\u306A\u304B\u3063\u305F\"];\n        } else {\n          return [\"\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F\", \"\u3067\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F\"];\n        }\n      } else if (finalConj === \"Te\" && initialVerb === \"\u3060\") {\n        return [\"\u3058\u3083\u306A\u304F\u3066\"];\n      } else if (finalConj === \"Conjunctive\" && initialVerb === \"\u3060\") {\n        return [\"\u3058\u3083\u306A\u304F\"];\n      }\n    }\n    throw new Error(\"unhandled copula auxiliaries/conjugation\");\n  }\n\n  let verbs: string[] = [initialVerb];\n  let typeII = initialTypeII;\n  for (const [auxIdx, aux] of auxs.entries()) {\n    const conj: Conjugation =\n      auxIdx === auxs.length - 1 ? finalConj : \"Dictionary\";\n    const prevAux: Auxiliary | undefined = auxs[auxIdx - 1];\n\n    if (\n      auxIdx !== auxs.length - 1 &&\n      (aux === \"Masu\" ||\n        aux === \"Nai\" ||\n        aux === \"Tai\" ||\n        aux == \"Hoshii\" ||\n        aux === \"Rashii\" ||\n        aux === \"SoudaConjecture\" ||\n        aux === \"SoudaHearsay\")\n    ) {\n      throw new Error(\"must be final auxiliary\");\n    }\n\n    if (prevAux === \"Kuru\") {\n      // While `conjugate` looks for with Kudasaru with `endsWith`, it looks for Kuru with exact-compare (because\n      // potentially lots of things could end in kuru)\n      const heads = verbs.map((s) => s.slice(0, -2));\n      const tails = conjugateAuxiliary(\"\u304F\u308B\", aux, conj);\n      verbs = heads.flatMap((prefix) => tails.map((t) => prefix + t));\n    } else {\n      verbs = verbs.flatMap((verb) =>\n        conjugateAuxiliary(verb, aux, conj, typeII),\n      );\n    }\n    typeII =\n      aux === \"Potential\" ||\n      aux === \"SeruSaseru\" ||\n      aux === \"ReruRareru\" ||\n      aux === \"CausativePassive\" ||\n      aux === \"ShortenedCausativePassive\" ||\n      aux === \"Ageru\" ||\n      aux === \"Sashiageru\" ||\n      aux === \"Kureru\" ||\n      aux === \"Miru\" ||\n      aux === \"TeIru\";\n  }\n  return verbs;\n}\n\nfunction conjugateAuxiliary(\n  verb: string,\n  aux: Auxiliary,\n  conj: Conjugation,\n  typeII: boolean = false,\n): string[] {\n  if (aux === \"Potential\") {\n    const newverb = conjugateTypeI(verb, \"Conditional\")[0] + \"\u308B\";\n    return conjugate(newverb, conj, true);\n  } else if (aux === \"Masu\") {\n    const base = conjugate(verb, \"Conjunctive\", typeII)[0];\n    switch (conj) {\n      case \"Negative\":\n        return [base + \"\u307E\u305B\u3093\", base + \"\u307E\u305B\u3093\u3067\u3057\u305F\"];\n      // case 'Conjunctive':\n      case \"Dictionary\":\n        return [base + \"\u307E\u3059\"];\n      case \"Conditional\":\n        return [base + \"\u307E\u3059\u308C\u3070\"];\n      case \"Imperative\":\n        return [base + \"\u307E\u305B\", base + \"\u307E\u3057\"]; // latter only for nasaru and ossharu\n      case \"Volitional\":\n        return [base + \"\u307E\u3057\u3087\u3046\"];\n      case \"Te\":\n        return [base + \"\u307E\u3057\u3066\"];\n      case \"Ta\":\n        return [base + \"\u307E\u3057\u305F\"];\n      case \"Tara\":\n        return [base + \"\u307E\u3057\u305F\u3089\"];\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"Nai\") {\n    const base = conjugate(verb, \"Negative\", typeII)[0];\n    switch (conj) {\n      case \"Negative\":\n        return [base + \"\u306A\u304F\u306F\u306A\u3044\"];\n      case \"Conjunctive\":\n        return [base + \"\u306A\u304F\"];\n      case \"Dictionary\":\n        return [base + \"\u306A\u3044\"];\n      case \"Conditional\":\n        return [base + \"\u306A\u3051\u308C\u3070\"];\n      // case 'Imperative':\n      // case 'Volitional':\n      case \"Te\":\n        return [base + \"\u306A\u304F\u3066\", base + \"\u306A\u3044\u3067\"]; // only the first is in Kamiya\n      case \"Ta\":\n        return [base + \"\u306A\u304B\u3063\u305F\"];\n      case \"Tara\":\n        return [base + \"\u306A\u304B\u3063\u305F\u3089\"];\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"Tai\") {\n    const base = conjugate(verb, \"Conjunctive\", typeII)[0];\n    switch (conj) {\n      case \"Negative\":\n        return [base + \"\u305F\u304F\u306A\u3044\"];\n      case \"Conjunctive\":\n        return [base + \"\u305F\u304F\"];\n      case \"Dictionary\":\n        return [base + \"\u305F\u3044\"];\n      case \"Conditional\":\n        return [base + \"\u305F\u3051\u308C\u3070\"];\n      // case 'Imperative':\n      // case 'Volitional':\n      case \"Te\":\n        return [base + \"\u305F\u304F\u3066\"];\n      case \"Ta\":\n        return [base + \"\u305F\u304B\u3063\u305F\"];\n      case \"Tara\":\n        return [base + \"\u305F\u304B\u3063\u305F\u3089\"];\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"Tagaru\") {\n    switch (conj) {\n      case \"Conditional\":\n      case \"Imperative\":\n      case \"Volitional\":\n      case \"Tari\":\n        throw new Error(\"Unhandled conjugation\");\n    }\n    const bases = conjugate(verb, \"Conjunctive\", typeII);\n    const tagaruConj = conjugate(\"\u305F\u304C\u308B\", conj, false);\n    return tagaruConj.map((suffix) => bases[0] + suffix);\n  } else if (aux === \"Hoshii\") {\n    const base = conjugate(verb, \"Te\", typeII)[0];\n    switch (conj) {\n      case \"Negative\":\n        return [base + \"\u307B\u3057\u304F\u306A\u3044\"];\n      case \"Conjunctive\":\n        return [base + \"\u307B\u3057\u304F\"];\n      case \"Dictionary\":\n        return [base + \"\u307B\u3057\u3044\"];\n      case \"Conditional\":\n        return [base + \"\u307B\u3057\u3051\u308C\u3070\"];\n      // case 'Imperative':\n      // case 'Volitional':\n      case \"Te\":\n        return [base + \"\u307B\u3057\u304F\u3066\"];\n      case \"Ta\":\n        return [base + \"\u307B\u3057\u304B\u3063\u305F\"];\n      case \"Tara\":\n        return [base + \"\u307B\u3057\u304B\u3063\u305F\u3089\"];\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"Rashii\") {\n    const base1 = conjugate(verb, \"Ta\", typeII)[0];\n    const base2 = verb;\n    const append = (suffix: string) =>\n      [base1, base2].map((prefix) => prefix + suffix);\n    switch (conj) {\n      case \"Negative\":\n        const neg = conjugateAuxiliary(verb, \"Nai\", \"Dictionary\")[0];\n        return [neg + \"\u3089\u3057\u3044\"];\n      case \"Conjunctive\":\n        return append(\"\u3089\u3057\u304F\");\n      case \"Dictionary\":\n        return append(\"\u3089\u3057\u3044\");\n      // case 'Conditional':\n      // case 'Imperative':\n      // case 'Volitional':\n      case \"Te\":\n        return append(\"\u3089\u3057\u304F\u3066\");\n      // case 'Ta':\n      // case 'Tara':\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"SoudaHearsay\") {\n    const base1 = conjugate(verb, \"Ta\", typeII)[0];\n    const base2 = verb; // dictionary form\n    const append = (suffix: string) =>\n      [base1, base2].map((prefix) => prefix + suffix);\n    switch (conj) {\n      // case 'Negative':\n      // case 'Conjunctive':\n      case \"Dictionary\":\n        return append(\"\u305D\u3046\u3060\");\n      // case 'Conditional':\n      // case 'Imperative':\n      // case 'Volitional':\n      // case 'Te':\n      // case 'Ta':\n      // case 'Tara':\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"SoudaConjecture\") {\n    const base = conjugate(verb, \"Conjunctive\", typeII)[0];\n    switch (conj) {\n      // case 'Negative':\n      // case 'Conjunctive':\n      case \"Dictionary\":\n        return [base + \"\u305D\u3046\u3060\", base + \"\u305D\u3046\u3067\u3059\"];\n      case \"Conditional\":\n        return [base + \"\u305D\u3046\u306A\u3089\"];\n      // case 'Imperative':\n      // case 'Volitional':\n      // case 'Te':\n      case \"Ta\":\n        return [base + \"\u305D\u3046\u3060\u3063\u305F\", base + \"\u305D\u3046\u3067\u3057\u305F\"];\n      // case 'Tara':\n      // case 'Tari':\n      default:\n        throw new Error(\"Unhandled conjugation\");\n    }\n  } else if (aux === \"SeruSaseru\" || aux === \"ShortenedCausative\") {\n    if (conj === \"Tara\" || conj === \"Tari\") {\n      throw new Error(\"Unhandled conjugation\");\n    }\n    let newverb;\n    if (verb === \"\u6765\u308B\" || verb === \"\u304F\u308B\") {\n      newverb = (verb[0] === \"\u6765\" ? \"\u6765\" : \"\u3053\") + \"\u3055\u305B\u308B\";\n    } else if (verb === \"\u3059\u308B\") {\n      newverb = \"\u3055\u305B\u308B\";\n    } else if (typeII) {\n      newverb = conjugateTypeII(verb, \"Negative\")[0] + \"\u3055\u305B\u308B\";\n    } else {\n      // type I\n      newverb = conjugateTypeI(verb, \"Negative\")[0] + \"\u305B\u308B\";\n    }\n    if (aux === \"ShortenedCausative\") {\n      newverb = newverb.slice(0, -2) + \"\u3059\";\n      return conjugate(newverb, conj, false);\n    }\n    return conjugate(newverb, conj, true);\n  } else if (aux === \"ReruRareru\") {\n    if (\n      conj === \"Conditional\" ||\n      conj === \"Imperative\" ||\n      conj === \"Volitional\" ||\n      conj === \"Tara\" ||\n      conj === \"Tari\"\n    ) {\n      throw new Error(\"Unhandled conjugation\");\n    }\n    let newverb;\n    if (verb === \"\u6765\u308B\" || verb === \"\u304F\u308B\") {\n      newverb = (verb[0] === \"\u6765\" ? \"\u6765\" : \"\u3053\") + \"\u3089\u308C\u308B\";\n    } else if (verb === \"\u3059\u308B\") {\n      newverb = \"\u3055\u308C\u308B\";\n    } else if (typeII) {\n      newverb = conjugateTypeII(verb, \"Negative\")[0] + \"\u3089\u308C\u308B\";\n    } else {\n      // type I\n      newverb = conjugateTypeI(verb, \"Negative\")[0] + \"\u308C\u308B\";\n    }\n    return conjugate(newverb, conj, true);\n  } else if (aux === \"CausativePassive\") {\n    const newverb =\n      conjugateAuxiliary(verb, \"SeruSaseru\", \"Negative\", typeII)[0] + \"\u3089\u308C\u308B\";\n    return conjugate(newverb, conj, true);\n  } else if (aux === \"ShortenedCausativePassive\") {\n    const newverb =\n      conjugateAuxiliary(verb, \"ShortenedCausative\", \"Negative\", typeII)[0] +\n      \"\u308C\u308B\";\n    return conjugate(newverb, conj, true);\n  } else if (\n    aux === \"Ageru\" ||\n    aux === \"Sashiageru\" ||\n    aux === \"Yaru\" ||\n    aux === \"Morau\" ||\n    aux === \"Itadaku\" ||\n    aux === \"Kureru\" ||\n    aux === \"Kudasaru\" ||\n    aux === \"TeIru\" ||\n    aux === \"TeAru\" ||\n    aux === \"Miru\" ||\n    aux === \"Iku\" ||\n    aux === \"Kuru\" ||\n    aux === \"Oku\" ||\n    aux === \"TeOru\"\n  ) {\n    const vte = conjugate(verb, \"Te\", typeII)[0];\n    const endings: string[] =\n      aux === \"Ageru\"\n        ? [\"\u3042\u3052\u308B\"]\n        : aux === \"Sashiageru\"\n          ? [\"\u5DEE\u3057\u4E0A\u3052\u308B\", \"\u3055\u3057\u3042\u3052\u308B\"]\n          : aux === \"Yaru\"\n            ? [\"\u3084\u308B\"]\n            : aux === \"Morau\"\n              ? [\"\u3082\u3089\u3046\"]\n              : aux === \"Itadaku\"\n                ? [\"\u3044\u305F\u3060\u304F\"]\n                : aux === \"Kureru\"\n                  ? [\"\u304F\u308C\u308B\"]\n                  : aux === \"Kudasaru\"\n                    ? [\"\u304F\u3060\u3055\u308B\"]\n                    : aux === \"TeIru\"\n                      ? [\"\u3044\u308B\", \"\u308B\"]\n                      : aux === \"TeAru\"\n                        ? [\"\u3042\u308B\"]\n                        : aux === \"Miru\"\n                          ? [\"\u307F\u308B\"]\n                          : aux === \"Iku\"\n                            ? [\"\u3044\u304F\"]\n                            : aux === \"Kuru\"\n                              ? [\"\u304F\u308B\"]\n                              : aux === \"Oku\"\n                                ? [\"\u304A\u304F\"]\n                                : aux === \"TeOru\"\n                                  ? [\"\u304A\u308B\"]\n                                  : [];\n    if (!endings[0]) {\n      throw new Error(\"missing ternary\");\n    }\n    if (aux === \"Kuru\") {\n      return conjugate(endings[0], conj).map((suffix) => vte + suffix);\n    }\n    const endingTypeII: boolean =\n      aux === \"Ageru\" ||\n      aux === \"Sashiageru\" ||\n      aux === \"Kureru\" ||\n      aux === \"TeIru\" ||\n      aux === \"Miru\";\n    const newVerbs = endings.map((ending) => vte + ending);\n    if (aux === \"Oku\") {\n      newVerbs.push(\n        vte.slice(0, -1) + (vte.slice(-1) === \"\u3067\" ? \"\u3069\u304F\" : \"\u3068\u304F\"),\n      );\n    } else if (aux === \"Iku\") {\n      newVerbs.push(vte + \"\u304F\");\n    }\n    return newVerbs.flatMap((v) => conjugate(v, conj, endingTypeII));\n  } else if (aux === \"Shimau\") {\n    const vte = conjugate(verb, \"Te\", typeII)[0];\n    const shimau = conjugate(vte + \"\u3057\u307E\u3046\", conj);\n    const noTe = vte.slice(0, -1);\n    // see https://www.sljfaq.org/afaq/colloquial-contractions.html\n    if (vte.endsWith(\"\u3066\")) {\n      // no rendaku\n      const chau = conjugate(noTe + \"\u3061\u3083\u3046\", conj);\n      const chimau = conjugate(noTe + \"\u3061\u307E\u3046\", conj);\n      return shimau.concat(chau).concat(chimau);\n    }\n    const jimau = conjugate(noTe + \"\u3058\u307E\u3046\", conj);\n    const dimau = conjugate(noTe + \"\u3062\u307E\u3046\", conj);\n    return shimau.concat(jimau).concat(dimau);\n  }\n  isNever(aux);\n  throw new Error(\"Unhandled auxiliary\");\n}\nfunction isNever(x: never) {\n  return x;\n}\n\nexport interface Deconjugated {\n  auxiliaries: Auxiliary[];\n  conjugation: Conjugation;\n  result: string[];\n}\nexport function verbDeconjugate(\n  conjugated: string,\n  dictionaryForm: string,\n  typeII = false,\n  maxAuxDepth = Infinity,\n): Deconjugated[] {\n  const hits: Deconjugated[] = [];\n\n  for (const conj of conjugations) {\n    try {\n      const result = conjugate(dictionaryForm, conj, typeII);\n      if (result.includes(conjugated)) {\n        hits.push({ conjugation: conj, auxiliaries: [], result });\n      }\n    } catch {}\n  }\n\n  if (maxAuxDepth <= 0) {\n    return hits;\n  }\n\n  for (const aux of auxiliaries) {\n    for (const conj of conjugations) {\n      try {\n        const result = conjugateAuxiliary(dictionaryForm, aux, conj, typeII);\n        if (result.includes(conjugated)) {\n          hits.push({ conjugation: conj, auxiliaries: [aux], result });\n        }\n      } catch {}\n    }\n  }\n\n  if (maxAuxDepth <= 1) {\n    return hits;\n  }\n\n  const penultimates: Auxiliary[] = [\n    \"Ageru\",\n    \"Sashiageru\",\n    \"Yaru\",\n    \"Morau\",\n    \"Itadaku\",\n    \"Kureru\",\n    \"Kudasaru\",\n    \"Miru\",\n    \"Iku\",\n    \"Kuru\",\n    \"Oku\",\n    \"Shimau\",\n    \"TeIru\",\n    \"TeAru\",\n    \"TeOru\",\n    \"Potential\",\n    \"ReruRareru\",\n    \"SeruSaseru\",\n  ];\n  const depth2Finals: Auxiliary[] = [\n    \"Masu\",\n    \"SoudaConjecture\",\n    \"SoudaHearsay\",\n    \"TeIru\",\n    \"Tai\",\n    \"Nai\",\n    \"Yaru\",\n  ];\n  for (const penultimate of penultimates) {\n    for (const final of depth2Finals) {\n      for (const conj of conjugations) {\n        const auxs = [penultimate, final];\n        try {\n          const result = conjugateAuxiliaries(\n            dictionaryForm,\n            auxs,\n            conj,\n            typeII,\n          );\n          if (result.includes(conjugated)) {\n            hits.push({ conjugation: conj, auxiliaries: auxs, result });\n          }\n        } catch {}\n      }\n    }\n  }\n\n  if (maxAuxDepth <= 2) {\n    return hits;\n  }\n\n  const antepenultimates: Auxiliary[] = [\"SeruSaseru\", \"ReruRareru\", \"Itadaku\"];\n  const depth3Finals: Auxiliary[] = [\"Masu\"];\n  for (const ante of antepenultimates) {\n    for (const penultimate of penultimates) {\n      for (const final of depth3Finals) {\n        for (const conj of conjugations) {\n          const auxs = [ante, penultimate, final];\n          try {\n            const result = conjugateAuxiliaries(\n              dictionaryForm,\n              auxs,\n              conj,\n              typeII,\n            );\n            if (result.includes(conjugated)) {\n              hits.push({ conjugation: conj, auxiliaries: auxs, result });\n            }\n          } catch {}\n        }\n      }\n    }\n  }\n\n  return hits;\n}\n\nexport { adjConjugations, adjConjugate, adjDeconjugate } from \"./adjective\";\n\nexport type { AdjConjugation, AdjDeconjugated } from \"./adjective\";\n", "const split = (s: string) => s.split(\"\");\nconst vec = [\n  split(\"\u3042\u3044\u3046\u3048\u304A\"),\n  split(\"\u304B\u304D\u304F\u3051\u3053\"),\n  split(\"\u304C\u304E\u3050\u3052\u3054\"),\n  split(\"\u3055\u3057\u3059\u305B\u305D\"),\n  split(\"\u3056\u3058\u305A\u305C\u305E\"),\n  split(\"\u305F\u3061\u3064\u3066\u3068\"),\n  split(\"\u3060\u3062\u3065\u3067\u3069\"),\n  split(\"\u306A\u306B\u306C\u306D\u306E\"),\n  split(\"\u306F\u3072\u3075\u3078\u307B\"),\n  split(\"\u3070\u3073\u3076\u3079\u307C\"),\n  split(\"\u3071\u3074\u3077\u307A\u307D\"),\n  split(\"\u307E\u307F\u3080\u3081\u3082\"),\n  [\"\u3084\", \"\", \"\u3086\", \"\", \"\u3088\"],\n  split(\"\u3089\u308A\u308B\u308C\u308D\"),\n  [\"\u308F\", \"\", \"\", \"\", \"\u3092\"],\n  [\"\u3093\", \"\", \"\", \"\", \"\"],\n];\nlet charToVecIndex: Map<String, number> = new Map([]);\nvec.forEach((row, rowidx) => {\n  row.forEach((char) => {\n    if (char.length > 0) {\n      charToVecIndex.set(char, rowidx);\n    }\n  });\n});\nexport function lookup(character: String, vowel: number): String {\n  if (vowel < 0 || vowel > 4) {\n    throw new Error(\"vowel must be between 0 and 4\");\n  }\n  const idx = charToVecIndex.get(character);\n  if (typeof idx === \"undefined\") {\n    throw new Error(\"unknown character\");\n  }\n  const ret = vec[idx][vowel];\n  if (ret.length === 0) {\n    throw new Error(\"vowel for kana does not exist\");\n  }\n  return ret;\n}\n", "export const adjConjugations = [\n  \"Present\",\n  \"Prenomial\",\n  \"Negative\",\n  \"Past\",\n  \"NegativePast\",\n  \"ConjunctiveTe\",\n  \"Adverbial\",\n  \"Conditional\",\n  \"TaraConditional\",\n  \"Tari\",\n  \"Noun\",\n  \"StemSou\",\n  \"StemNegativeSou\",\n] as const;\nexport type AdjConjugation = (typeof adjConjugations)[number];\n\nfunction never(x: never) {\n  throw new Error(\"never?\");\n}\n\nexport function adjConjugate(\n  adjective: string,\n  conj: AdjConjugation,\n  iAdjective: boolean,\n): string[] {\n  if (iAdjective) {\n    let stem = adjective.slice(0, -1);\n    let addSa = false;\n    if (adjective === \"\u3044\u3044\" || adjective === \"\u826F\u3044\" || adjective === \"\u3088\u3044\") {\n      stem = adjective.startsWith(\"\u826F\") ? \"\u826F\" : \"\u3088\";\n      addSa = true;\n    } else if (adjective.endsWith(\"\u306A\u3044\")) {\n      addSa = true;\n    }\n    switch (conj) {\n      case \"Present\":\n        return [adjective];\n      case \"Prenomial\":\n        return [adjective];\n      case \"Negative\":\n        return [stem + \"\u304F\u306A\u3044\"];\n      case \"Past\":\n        return [stem + \"\u304B\u3063\u305F\"];\n      case \"NegativePast\":\n        return [stem + \"\u304F\u306A\u304B\u3063\u305F\"];\n      case \"ConjunctiveTe\":\n        return [stem + \"\u304F\", stem + \"\u304F\u3066\"];\n      case \"Adverbial\":\n        return [stem + \"\u304F\"];\n      case \"Conditional\":\n        return [stem + \"\u3051\u308C\u3070\"];\n      case \"TaraConditional\":\n        return [stem + \"\u304B\u3063\u305F\u3089\"];\n      case \"Tari\":\n        return [stem + \"\u304B\u3063\u305F\u308A\"];\n      case \"Noun\":\n        return [stem + \"\u3055\"];\n      case \"StemSou\":\n        return [addSa ? stem + \"\u3055\u305D\u3046\" : stem + \"\u305D\u3046\"];\n      case \"StemNegativeSou\": {\n        const negativeStem = stem + \"\u304F\u306A\";\n        // basically conjugate adjective with 'Negative' and redo stem\n        return [negativeStem + \"\u3055\u305D\u3046\"];\n      }\n      default:\n        never(conj);\n    }\n  }\n  // na-adjective\n  switch (conj) {\n    case \"Prenomial\":\n      return [adjective + \"\u306A\"];\n    case \"Present\":\n      return [\"\u3060\", \"\u3067\u3059\", \"\u3067\u3054\u3056\u3044\u307E\u3059\"].map((suffix) => adjective + suffix);\n    case \"Negative\":\n      return [\"\u3067\u306F\u306A\u3044\", \"\u3067\u306A\u3044\", \"\u3058\u3083\u306A\u3044\", \"\u3067\u306F\u3042\u308A\u307E\u305B\u3093\"].map(\n        (suffix) => adjective + suffix,\n      );\n    case \"Past\":\n      return [\"\u3060\u3063\u305F\", \"\u3067\u3057\u305F\"].map((suffix) => adjective + suffix);\n    case \"NegativePast\":\n      return [\n        \"\u3067\u306F\u306A\u304B\u3063\u305F\",\n        \"\u3067\u306A\u304B\u3063\u305F\",\n        \"\u3058\u3083\u306A\u304B\u3063\u305F\",\n        \"\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F\",\n      ].map((suffix) => adjective + suffix);\n    case \"ConjunctiveTe\":\n      return [adjective + \"\u3067\"];\n    case \"Adverbial\":\n      return [adjective + \"\u306B\"];\n    case \"Conditional\":\n      return [\"\u306A\u3089\", \"\u306A\u3089\u3070\"].map((suffix) => adjective + suffix);\n    case \"TaraConditional\":\n      return [\"\u3060\u3063\u305F\u3089\"].map((suffix) => adjective + suffix);\n    case \"Tari\":\n      return [\"\u3060\u3063\u305F\u308A\", \"\u3067\u3057\u305F\u308A\"].map((suffix) => adjective + suffix);\n    case \"Noun\":\n      return [adjective + \"\u3055\"];\n    case \"StemSou\":\n      return [adjective + \"\u305D\u3046\"];\n    case \"StemNegativeSou\":\n      return [adjective + \"\u3058\u3083\u306A\u3055\u305D\u3046\"];\n    default:\n      never(conj);\n  }\n\n  throw new Error(\"unknown conjugation/iAdjective\");\n}\n\nexport interface AdjDeconjugated {\n  conjugation: AdjConjugation;\n  result: string[];\n}\nexport function adjDeconjugate(\n  conjugated: string,\n  dictionary: string,\n  iAdjective: boolean,\n): AdjDeconjugated[] {\n  const hits: AdjDeconjugated[] = [];\n  for (const conj of adjConjugations) {\n    const result = adjConjugate(dictionary, conj, iAdjective);\n    if (result.includes(conjugated)) {\n      hits.push({ conjugation: conj, result });\n    }\n  }\n  return hits;\n}\n"],
  "mappings": "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",
  "names": []
}
