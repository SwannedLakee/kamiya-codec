{
  "version": 3,
  "sources": ["../hiragana.ts", "../adjective.ts", "../index.js"],
  "sourcesContent": ["const split = (s: string) => s.split('');\nconst vec = [\n  split('\u3042\u3044\u3046\u3048\u304A'),\n  split('\u304B\u304D\u304F\u3051\u3053'),\n  split('\u304C\u304E\u3050\u3052\u3054'),\n  split('\u3055\u3057\u3059\u305B\u305D'),\n  split('\u3056\u3058\u305A\u305C\u305E'),\n  split('\u305F\u3061\u3064\u3066\u3068'),\n  split('\u3060\u3062\u3065\u3067\u3069'),\n  split('\u306A\u306B\u306C\u306D\u306E'),\n  split('\u306F\u3072\u3075\u3078\u307B'),\n  split('\u3070\u3073\u3076\u3079\u307C'),\n  split('\u3071\u3074\u3077\u307A\u307D'),\n  split('\u307E\u307F\u3080\u3081\u3082'),\n  ['\u3084', '', '\u3086', '', '\u3088'],\n  split('\u3089\u308A\u308B\u308C\u308D'),\n  ['\u308F', '', '', '', '\u3092'],\n  ['\u3093', '', '', '', ''],\n];\nlet charToVecIndex: Map<String, number> = new Map([]);\nvec.forEach((row, rowidx) => {\n  row.forEach(char => {\n    if (char.length > 0) { charToVecIndex.set(char, rowidx) }\n  });\n});\nexport function lookup(character: String, vowel: number): String {\n  if (vowel < 0 || vowel > 4) { throw new Error('vowel must be between 0 and 4'); }\n  const idx = charToVecIndex.get(character);\n  if (typeof idx === 'undefined') { throw new Error('unknown character'); }\n  const ret = vec[idx][vowel];\n  if (ret.length === 0) { throw new Error('vowel for kana does not exist'); }\n  return ret;\n}", "export const adjConjugations = [\n  'Present', 'Prenomial', 'Negative', 'Past', 'NegativePast', 'ConjunctiveTe', 'Adverbial', 'Conditional',\n  'TaraConditional', 'Tari', 'Noun', 'StemSou', 'StemNegativeSou'\n] as const;\nexport type AdjConjugation = typeof adjConjugations[number];\n\nfunction never(x: never) { throw new Error('never?'); }\n\nexport function adjConjugate(adjective: string, conj: AdjConjugation, iAdjective: boolean): string[] {\n  if (iAdjective) {\n    let stem = adjective.slice(0, -1);\n    let addSa = false;\n    if (adjective === '\u3044\u3044' || adjective === '\u826F\u3044' || adjective === '\u3088\u3044') {\n      stem = adjective.startsWith('\u826F') ? '\u826F' : '\u3088';\n      addSa = true;\n    }else if (adjective.endsWith('\u306A\u3044')) {\n      addSa = true;\n    }\n    switch (conj) {\n    case 'Present': return [adjective];\n    case 'Prenomial': return [adjective];\n    case 'Negative': return [stem + '\u304F\u306A\u3044'];\n    case 'Past': return [stem + '\u304B\u3063\u305F'];\n    case 'NegativePast': return [stem + '\u304F\u306A\u304B\u3063\u305F'];\n    case 'ConjunctiveTe': return [stem + '\u304F', stem + '\u304F\u3066'];\n    case 'Adverbial': return [stem + '\u304F'];\n    case 'Conditional': return [stem + '\u3051\u308C\u3070'];\n    case 'TaraConditional': return [stem + '\u304B\u3063\u305F\u3089'];\n    case 'Tari': return [stem + '\u304B\u3063\u305F\u308A'];\n    case 'Noun': return [stem + '\u3055'];\n    case 'StemSou': return [addSa ? stem + '\u3055\u305D\u3046' : stem + '\u305D\u3046'];\n    case 'StemNegativeSou': {\n      const negativeStem = stem + '\u304F\u306A';\n      // basically conjugate adjective with 'Negative' and redo stem\n      return [negativeStem + '\u3055\u305D\u3046'];\n    }\n    default: never(conj);\n    }\n  }\n  // na-adjective\n  switch (conj) {\n  case 'Prenomial': return [adjective + '\u306A'];\n  case 'Present': return ['\u3060', '\u3067\u3059', '\u3067\u3054\u3056\u3044\u307E\u3059'].map(suffix => adjective + suffix);\n  case 'Negative': return ['\u3067\u306F\u306A\u3044', '\u3067\u306A\u3044', '\u3058\u3083\u306A\u3044', '\u3067\u306F\u3042\u308A\u307E\u305B\u3093'].map(suffix => adjective + suffix);\n  case 'Past': return ['\u3060\u3063\u305F', '\u3067\u3057\u305F'].map(suffix => adjective + suffix);\n  case 'NegativePast':\n    return ['\u3067\u306F\u306A\u304B\u3063\u305F', '\u3067\u306A\u304B\u3063\u305F', '\u3058\u3083\u306A\u304B\u3063\u305F', '\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F'].map(suffix => adjective + suffix);\n  case 'ConjunctiveTe': return [adjective + '\u3067'];\n  case 'Adverbial': return [adjective + '\u306B'];\n  case 'Conditional': return ['\u306A\u3089', '\u306A\u3089\u3070'].map(suffix => adjective + suffix);\n  case 'TaraConditional': return ['\u3060\u3063\u305F\u3089'].map(suffix => adjective + suffix);\n  case 'Tari': return ['\u3060\u3063\u305F\u308A', '\u3067\u3057\u305F\u308A'].map(suffix => adjective + suffix);\n  case 'Noun': return [adjective + '\u3055'];\n  case 'StemSou': return [adjective + '\u305D\u3046'];\n  case 'StemNegativeSou': return [adjective + '\u3058\u3083\u306A\u3055\u305D\u3046'];\n  default: never(conj);\n  }\n\n  throw new Error('unknown conjugation/iAdjective');\n}\n\nexport interface AdjDeconjugated {\n  conjugation: AdjConjugation;\n  result: string[];\n}\nexport function adjDeconjugate(conjugated: string, dictionary: string, iAdjective: boolean): AdjDeconjugated[] {\n  const hits: AdjDeconjugated[] = [];\n  for (const conj of adjConjugations) {\n    const result = adjConjugate(dictionary, conj, iAdjective);\n    if (result.includes(conjugated)) { hits.push({conjugation: conj, result}) }\n  }\n  return hits;\n}", "\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verbDeconjugate = exports.conjugateAuxiliaries = exports.conjugate = exports.conjugateTypeII = exports.conjugateTypeI = exports.auxiliaries = exports.conjugations = void 0;\nconst hiragana_1 = require(\"./hiragana\");\nexports.conjugations = [\n    'Negative', 'Conjunctive', 'Dictionary', 'Conditional', 'Imperative', 'Volitional', 'Te', 'Ta', 'Tara', 'Tari',\n    'Zu',\n];\nexports.auxiliaries = [\n    'Potential',\n    'Masu',\n    'Nai',\n    'Tai',\n    'Tagaru',\n    'Hoshii',\n    'Rashii',\n    'SoudaHearsay',\n    'SoudaConjecture',\n    'SeruSaseru',\n    'ShortenedCausative',\n    'ReruRareru',\n    'CausativePassive',\n    'ShortenedCausativePassive',\n    'Ageru',\n    'Sashiageru',\n    'Yaru',\n    'Morau',\n    'Itadaku',\n    'Kureru',\n    'Kudasaru',\n    'TeIru',\n    'TeAru',\n    'Miru',\n    'Iku',\n    'Kuru',\n    'Oku',\n    'Shimau',\n    'TeOru',\n];\nconst specialCasesRaw = [\n    ['\u3042\u308B', 'Negative', ''],\n    ['\u3054\u3056\u308B', 'Conjunctive', '\u3054\u3056\u3044'],\n    ['\u3044\u3089\u3063\u3057\u3083\u308B', 'Conjunctive', '\u3044\u3089\u3063\u3057\u3083\u3044'],\n    ['\u3044\u3089\u3063\u3057\u3083\u308B', 'Conditional', '\u3044\u3089\u3063\u3057\u3083\u3044'],\n    ['\u3044\u3089\u3063\u3057\u3083\u308B', 'Imperative', '\u3044\u3089\u3063\u3057\u3083\u3044'],\n];\nlet specialCases = new Map([]);\nfor (const [verb, conj, result] of specialCasesRaw) {\n    let outer = specialCases.get(verb);\n    if (outer) {\n        outer.set(conj, result);\n    }\n    else {\n        specialCases.set(verb, new Map([[conj, result]]));\n    }\n}\nconst conjToIdx = new Map(exports.conjugations.filter(x => x !== 'Imperative').map((x, i) => [x, i]));\nconjToIdx.set('Zu', (_a = conjToIdx.get('Negative')) !== null && _a !== void 0 ? _a : -1);\nconst tteRaw = [\n    ['\u304F', ['\u3044\u3066', '\u3044\u305F', '\u3044\u305F\u3089', '\u3044\u305F\u308A']],\n    ['\u3050', ['\u3044\u3067', '\u3044\u3060', '\u3044\u3060\u3089', '\u3044\u3060\u308A']],\n    ['\u3059', ['\u3057\u3066', '\u3057\u305F', '\u3057\u305F\u3089', '\u3057\u305F\u308A']],\n    ['\u306C', ['\u3093\u3067', '\u3093\u3060', '\u3093\u3060\u3089', '\u3093\u3060\u308A']],\n    ['\u3076', ['\u3093\u3067', '\u3093\u3060', '\u3093\u3060\u3089', '\u3093\u3060\u308A']],\n    ['\u3080', ['\u3093\u3067', '\u3093\u3060', '\u3093\u3060\u3089', '\u3093\u3060\u308A']],\n    ['\u3064', ['\u3063\u3066', '\u3063\u305F', '\u3063\u305F\u3089', '\u3063\u305F\u308A']],\n    ['\u308B', ['\u3063\u3066', '\u3063\u305F', '\u3063\u305F\u3089', '\u3063\u305F\u308A']],\n    ['\u3046', ['\u3063\u3066', '\u3063\u305F', '\u3063\u305F\u3089', '\u3063\u305F\u308A']],\n];\nlet tte = new Map([]);\nfor (const [tail, quad] of tteRaw) {\n    tte.set(tail, quad);\n}\nfunction conjugateTypeI(verb, conj) {\n    {\n        if (verb === '\u3059\u308B') {\n            return conjugateSuru(verb, conj);\n        }\n        else if (verb === '\u304F\u308B' || verb === '\u6765\u308B') {\n            return conjugateKuru(verb, conj);\n        }\n        else if (verb === '\u3060') {\n            return conjugateDa(verb, conj);\n        }\n        else if (verb === '\u3067\u3059') {\n            return conjugateDesu(verb, conj);\n        }\n        else if (verb.endsWith('\u304F\u3060\u3055\u308B')) {\n            if (conj === 'Dictionary') {\n                return [verb];\n            }\n            else if (conj === 'Conjunctive') {\n                return [verb.slice(0, -2) + '\u3055\u3044'];\n            }\n            else {\n                throw new Error('unknown conjugation for -kudasaru');\n            }\n        }\n        const specialHit = specialCases.get(verb);\n        if (specialHit && specialHit.has(conj)) {\n            return [specialHit.get(conj) || ''];\n        }\n        // The above inner-most `get` is guaranteed to be not-undefined, so the empty string will never be returned, but\n        // TypeScript 3.0.1 doesn't treat `Map.has` as a type guard \uD83D\uDE23.\n    }\n    const head = verb.slice(0, -1);\n    const tail = verb.slice(-1);\n    const idx = conjToIdx.get(conj === 'Imperative' ? 'Conditional' : conj);\n    if (typeof idx === 'undefined') {\n        throw new Error('Conjugation not yet implemented');\n    }\n    if (idx < 5) {\n        if (tail === '\u3046') {\n            if (idx === 0) {\n                return [head + '\u308F'];\n            }\n            return [head + hiragana_1.lookup('\u3042', idx)];\n        }\n        return [head + hiragana_1.lookup(tail, idx)];\n    }\n    const tidx = idx - 5;\n    const tteHit = tte.get((verb === '\u884C\u304F' || verb === '\u3044\u304F') ? '\u3064' : tail);\n    if (!tteHit) {\n        throw new Error('Unknown verb ending. Is it in dictionary form?');\n    }\n    return [head + tteHit[tidx]];\n}\nexports.conjugateTypeI = conjugateTypeI;\nfunction conjugateTypeII(verb, conj) {\n    if (verb === '\u3059\u308B') {\n        return conjugateSuru(verb, conj);\n    }\n    else if (verb === '\u304F\u308B' || verb === '\u6765\u308B') {\n        return conjugateKuru(verb, conj);\n    }\n    else if (verb === '\u3060') {\n        return conjugateDa(verb, conj);\n    }\n    else if (verb === '\u3067\u3059') {\n        return conjugateDesu(verb, conj);\n    }\n    const head = verb.slice(0, -1);\n    switch (conj) {\n        case 'Negative':\n        case 'Zu': return [head];\n        case 'Conjunctive': return [head];\n        case 'Dictionary': return [verb];\n        case 'Conditional': return [head + '\u308C'];\n        case 'Imperative': return [head + '\u308D', head + '\u3088'];\n        case 'Volitional': return [head + '\u3088\u3046'];\n        case 'Te': return [head + '\u3066'];\n        case 'Ta': return [head + '\u305F'];\n        case 'Tara': return [head + '\u305F\u3089'];\n        case 'Tari': return [head + '\u305F\u308A'];\n        default: throw new Error('Unhandled conjugation');\n    }\n}\nexports.conjugateTypeII = conjugateTypeII;\nfunction conjugateKuru(verb, conj) {\n    let ret = '';\n    switch (conj) {\n        case 'Negative':\n        case 'Zu':\n            ret = '\u3053';\n            break;\n        case 'Conjunctive':\n            ret = '\u304D';\n            break;\n        case 'Dictionary':\n            ret = '\u304F\u308B';\n            break;\n        case 'Conditional':\n            ret = '\u304F\u308C';\n            break;\n        case 'Imperative':\n            ret = '\u3053\u3044';\n            break;\n        case 'Volitional':\n            ret = '\u3053\u3088\u3046';\n            break;\n        case 'Te':\n            ret = '\u304D\u3066';\n            break;\n        case 'Ta':\n            ret = '\u304D\u305F';\n            break;\n        case 'Tara':\n            ret = '\u304D\u305F\u3089';\n            break;\n        case 'Tari':\n            ret = '\u304D\u305F\u308A';\n            break;\n        default: throw new Error('Unhandled conjugation');\n    }\n    const head = verb.slice(0, -1);\n    if (head === '\u304F') {\n        return [ret];\n    }\n    else if (head === '\u6765') {\n        return ['\u6765' + ret.slice(1)];\n    }\n    throw new Error('Expected input to be \u6765\u308B or \u304F\u308B');\n}\nfunction conjugateSuru(verb, conj) {\n    switch (conj) {\n        case 'Negative': return ['\u3057'];\n        case 'Conjunctive': return ['\u3057'];\n        case 'Dictionary': return ['\u3059\u308B'];\n        case 'Conditional': return ['\u3059\u308C'];\n        case 'Imperative': return ['\u3057\u308D', '\u305B\u3088'];\n        case 'Volitional': return ['\u3057\u3088\u3046'];\n        case 'Te': return ['\u3057\u3066'];\n        case 'Ta': return ['\u3057\u305F'];\n        case 'Tara': return ['\u3057\u305F\u3089'];\n        case 'Tari': return ['\u3057\u305F\u308A'];\n        case 'Zu': return ['\u305B\u305A'];\n        default: throw new Error('Unhandled conjugation');\n    }\n}\nfunction conjugateDa(_verb, conj) {\n    switch (conj) {\n        case 'Negative': return ['\u3067\u306A\u3044', '\u3067\u306F\u306A\u3044', '\u3058\u3083\u306A\u3044'];\n        case 'Dictionary': return ['\u3060'];\n        case 'Conditional': return ['\u306A\u3089'];\n        // case 'Presumptive': return ['\u3060\u308D\u3046']; // omitting this\n        case 'Te': return ['\u3067'];\n        case 'Ta': return ['\u3060\u3063\u305F'];\n        case 'Tara': return ['\u3060\u3063\u305F\u3089'];\n        case 'Tari': return ['\u3060\u3063\u305F\u308A'];\n        default: throw new Error('Unhandled conjugation');\n    }\n}\nfunction conjugateDesu(_verb, conj) {\n    switch (conj) {\n        case 'Negative': return ['\u3067\u3042\u308A\u307E\u305B\u3093', '\u3067\u306F\u3042\u308A\u307E\u305B\u3093'];\n        case 'Dictionary': return ['\u3067\u3059'];\n        // case 'Presumptive': return ['\u3067\u305D\u3046']; // omitting this\n        case 'Te': return ['\u3067\u3057\u3066'];\n        case 'Ta': return ['\u3067\u3057\u305F'];\n        case 'Tara': return ['\u3067\u3057\u305F\u3089'];\n        case 'Tari': return ['\u3067\u3057\u305F\u308A'];\n        default: throw new Error('Unhandled conjugation');\n    }\n}\nfunction conjugateStrict(verb, conj, typeII = false) {\n    return ((verb.slice(-1) === '\u308B' && typeII) ? conjugateTypeII : conjugateTypeI)(verb, conj);\n}\nfunction conjugate(verb, conj, typeII = false) {\n    const ret = conjugateStrict(verb, conj, typeII);\n    if ((conj === 'Negative' || conj === 'Zu') && (verb !== '\u3060' && verb !== '\u3067\u3059')) {\n        // Don't do this for da/desu because their negatives are baked in\n        ret.push(ret[0] + (conj === 'Negative' ? '\u306A\u3044' : '\u305A'));\n    }\n    else if (conj === 'Conjunctive') {\n        ret.push(ret[0] + '\u307E\u3059');\n    }\n    else if (conj === 'Conditional') {\n        ret.push(ret[0] + '\u3070');\n    }\n    else if (conj === 'Volitional') {\n        ret.push(ret[0] + '\u3046');\n    }\n    return ret;\n}\nexports.conjugate = conjugate;\nfunction conjugateAuxiliaries(initialVerb, auxs, finalConj, initialTypeII = false) {\n    if (auxs.length === 0) {\n        return conjugate(initialVerb, finalConj, initialTypeII);\n    }\n    if (initialVerb === '\u3060' || initialVerb === '\u3067\u3059') {\n        if (auxs.length === 1 && auxs[0] === 'Nai') {\n            if (finalConj === 'Ta') {\n                if (initialVerb === '\u3060') {\n                    return ['\u3067\u306F\u306A\u304B\u3063\u305F', '\u3058\u3083\u306A\u304B\u3063\u305F'];\n                }\n                else {\n                    return ['\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F', '\u3067\u3042\u308A\u307E\u305B\u3093\u3067\u3057\u305F'];\n                }\n            }\n            else if (finalConj === 'Te' && initialVerb === '\u3060') {\n                return ['\u3058\u3083\u306A\u304F\u3066'];\n            }\n        }\n        throw new Error('unhandled copula auxiliaries/conjugation');\n    }\n    let verbs = [initialVerb];\n    let typeII = initialTypeII;\n    for (const [auxIdx, aux] of auxs.entries()) {\n        const conj = auxIdx === auxs.length - 1 ? finalConj : 'Dictionary';\n        const prevAux = auxs[auxIdx - 1];\n        if (auxIdx !== auxs.length - 1 && (aux === 'Masu' || aux === 'Nai' || aux === 'Tai' || aux == 'Hoshii' ||\n            aux === 'Rashii' || aux === 'SoudaConjecture' || aux === 'SoudaHearsay')) {\n            throw new Error('must be final auxiliary');\n        }\n        if (prevAux === 'Kuru') {\n            // While `conjugate` looks for with Kudasaru with `endsWith`, it looks for Kuru with exact-compare (because\n            // potentially lots of things could end in kuru)\n            const heads = verbs.map(s => s.slice(0, -2));\n            const tails = conjugateAuxiliary('\u304F\u308B', aux, conj);\n            verbs = heads.flatMap(prefix => tails.map(t => prefix + t));\n        }\n        else {\n            verbs = verbs.flatMap(verb => conjugateAuxiliary(verb, aux, conj, typeII));\n        }\n        typeII = aux === 'Potential' || aux === 'SeruSaseru' || aux === 'ReruRareru' || aux === 'CausativePassive' ||\n            aux === 'ShortenedCausativePassive' || aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Kureru' ||\n            aux === 'Miru' || aux === 'TeIru';\n    }\n    return verbs;\n}\nexports.conjugateAuxiliaries = conjugateAuxiliaries;\nfunction conjugateAuxiliary(verb, aux, conj, typeII = false) {\n    if (aux === 'Potential') {\n        const newverb = conjugateTypeI(verb, 'Conditional')[0] + '\u308B';\n        return conjugate(newverb, conj, true);\n    }\n    else if (aux === 'Masu') {\n        const base = conjugate(verb, 'Conjunctive', typeII)[0];\n        switch (conj) {\n            case 'Negative': return [base + '\u307E\u305B\u3093', base + '\u307E\u305B\u3093\u3067\u3057\u305F'];\n            // case 'Conjunctive':\n            case 'Dictionary': return [base + '\u307E\u3059'];\n            case 'Conditional': return [base + '\u307E\u3059\u308C\u3070'];\n            case 'Imperative': return [base + '\u307E\u305B', base + '\u307E\u3057']; // latter only for nasaru and ossharu\n            case 'Volitional': return [base + '\u307E\u3057\u3087\u3046'];\n            case 'Te': return [base + '\u307E\u3057\u3066'];\n            case 'Ta': return [base + '\u307E\u3057\u305F'];\n            case 'Tara': return [base + '\u307E\u3057\u305F\u3089'];\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'Nai') {\n        const base = conjugate(verb, 'Negative', typeII)[0];\n        switch (conj) {\n            case 'Negative': return [base + '\u306A\u304F\u306F\u306A\u3044'];\n            case 'Conjunctive': return [base + '\u306A\u304F'];\n            case 'Dictionary': return [base + '\u306A\u3044'];\n            case 'Conditional': return [base + '\u306A\u3051\u308C\u3070'];\n            // case 'Imperative':\n            // case 'Volitional':\n            case 'Te': return [base + '\u306A\u304F\u3066', base + '\u306A\u3044\u3067']; // only the first is in Kamiya\n            case 'Ta': return [base + '\u306A\u304B\u3063\u305F'];\n            case 'Tara': return [base + '\u306A\u304B\u3063\u305F\u3089'];\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'Tai') {\n        const base = conjugate(verb, 'Conjunctive', typeII)[0];\n        switch (conj) {\n            case 'Negative': return [base + '\u305F\u304F\u306A\u3044'];\n            case 'Conjunctive': return [base + '\u305F\u304F'];\n            case 'Dictionary': return [base + '\u305F\u3044'];\n            case 'Conditional': return [base + '\u305F\u3051\u308C\u3070'];\n            // case 'Imperative':\n            // case 'Volitional':\n            case 'Te': return [base + '\u305F\u304F\u3066'];\n            case 'Ta': return [base + '\u305F\u304B\u3063\u305F'];\n            case 'Tara': return [base + '\u305F\u304B\u3063\u305F\u3089'];\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'Tagaru') {\n        switch (conj) {\n            case 'Conditional':\n            case 'Imperative':\n            case 'Volitional':\n            case 'Tari': throw new Error('Unhandled conjugation');\n        }\n        const bases = conjugate(verb, 'Conjunctive', typeII);\n        const tagaruConj = conjugate('\u305F\u304C\u308B', conj, false);\n        return tagaruConj.map(suffix => bases[0] + suffix);\n    }\n    else if (aux === 'Hoshii') {\n        const base = conjugate(verb, 'Te', typeII)[0];\n        switch (conj) {\n            case 'Negative': return [base + '\u307B\u3057\u304F\u306A\u3044'];\n            case 'Conjunctive': return [base + '\u307B\u3057\u304F'];\n            case 'Dictionary': return [base + '\u307B\u3057\u3044'];\n            case 'Conditional': return [base + '\u307B\u3057\u3051\u308C\u3070'];\n            // case 'Imperative':\n            // case 'Volitional':\n            case 'Te': return [base + '\u307B\u3057\u304F\u3066'];\n            case 'Ta': return [base + '\u307B\u3057\u304B\u3063\u305F'];\n            case 'Tara': return [base + '\u307B\u3057\u304B\u3063\u305F\u3089'];\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'Rashii') {\n        const base1 = conjugate(verb, 'Ta', typeII)[0];\n        const base2 = verb;\n        const append = (suffix) => [base1, base2].map(prefix => prefix + suffix);\n        switch (conj) {\n            case 'Negative':\n                const neg = conjugateAuxiliary(verb, 'Nai', 'Dictionary')[0];\n                return [neg + '\u3089\u3057\u3044'];\n            case 'Conjunctive': return append('\u3089\u3057\u304F');\n            case 'Dictionary': return append('\u3089\u3057\u3044');\n            // case 'Conditional':\n            // case 'Imperative':\n            // case 'Volitional':\n            case 'Te': return append('\u3089\u3057\u304F\u3066');\n            // case 'Ta':\n            // case 'Tara':\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'SoudaHearsay') {\n        const base1 = conjugate(verb, 'Ta', typeII)[0];\n        const base2 = verb; // dictionary form\n        const append = (suffix) => [base1, base2].map(prefix => prefix + suffix);\n        switch (conj) {\n            // case 'Negative':\n            // case 'Conjunctive':\n            case 'Dictionary': return append('\u305D\u3046\u3060');\n            // case 'Conditional':\n            // case 'Imperative':\n            // case 'Volitional':\n            // case 'Te':\n            // case 'Ta':\n            // case 'Tara':\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'SoudaConjecture') {\n        const base = conjugate(verb, 'Conjunctive', typeII)[0];\n        switch (conj) {\n            // case 'Negative':\n            // case 'Conjunctive':\n            case 'Dictionary': return [base + '\u305D\u3046\u3060', base + '\u305D\u3046\u3067\u3059'];\n            case 'Conditional': return [base + '\u305D\u3046\u306A\u3089'];\n            // case 'Imperative':\n            // case 'Volitional':\n            // case 'Te':\n            case 'Ta': return [base + '\u305D\u3046\u3060\u3063\u305F', base + '\u305D\u3046\u3067\u3057\u305F'];\n            // case 'Tara':\n            // case 'Tari':\n            default: throw new Error('Unhandled conjugation');\n        }\n    }\n    else if (aux === 'SeruSaseru' || aux === 'ShortenedCausative') {\n        if (conj === 'Tara' || conj === 'Tari') {\n            throw new Error('Unhandled conjugation');\n        }\n        let newverb;\n        if (verb === '\u6765\u308B' || verb === '\u304F\u308B') {\n            newverb = (verb[0] === '\u6765' ? '\u6765' : '\u3053') + '\u3055\u305B\u308B';\n        }\n        else if (verb === '\u3059\u308B') {\n            newverb = '\u3055\u305B\u308B';\n        }\n        else if (typeII) {\n            newverb = conjugateTypeII(verb, 'Negative')[0] + '\u3055\u305B\u308B';\n        }\n        else { // type I\n            newverb = conjugateTypeI(verb, 'Negative')[0] + '\u305B\u308B';\n        }\n        if (aux === 'ShortenedCausative') {\n            newverb = newverb.slice(0, -2) + '\u3059';\n            return conjugate(newverb, conj, false);\n        }\n        return conjugate(newverb, conj, true);\n    }\n    else if (aux === 'ReruRareru') {\n        if (conj === 'Conditional' || conj === 'Imperative' || conj === 'Volitional' || conj === 'Tara' ||\n            conj === 'Tari') {\n            throw new Error('Unhandled conjugation');\n        }\n        let newverb;\n        if (verb === '\u6765\u308B' || verb === '\u304F\u308B') {\n            newverb = (verb[0] === '\u6765' ? '\u6765' : '\u3053') + '\u3089\u308C\u308B';\n        }\n        else if (verb === '\u3059\u308B') {\n            newverb = '\u3055\u308C\u308B';\n        }\n        else if (typeII) {\n            newverb = conjugateTypeII(verb, 'Negative')[0] + '\u3089\u308C\u308B';\n        }\n        else { // type I\n            newverb = conjugateTypeI(verb, 'Negative')[0] + '\u308C\u308B';\n        }\n        return conjugate(newverb, conj, true);\n    }\n    else if (aux === 'CausativePassive') {\n        const newverb = conjugateAuxiliary(verb, 'SeruSaseru', 'Negative', typeII)[0] + '\u3089\u308C\u308B';\n        return conjugate(newverb, conj, true);\n    }\n    else if (aux === 'ShortenedCausativePassive') {\n        const newverb = conjugateAuxiliary(verb, 'ShortenedCausative', 'Negative', typeII)[0] + '\u308C\u308B';\n        return conjugate(newverb, conj, true);\n    }\n    else if (aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Yaru' || aux === 'Morau' || aux === 'Itadaku' ||\n        aux === 'Kureru' || aux === 'Kudasaru' || aux === 'TeIru' || aux === 'TeAru' || aux === 'Miru' ||\n        aux === 'Iku' || aux === 'Kuru' || aux === 'Oku' || aux === 'TeOru') {\n        const vte = conjugate(verb, 'Te', typeII)[0];\n        const endings = aux === 'Ageru' ? ['\u3042\u3052\u308B']\n            : aux === 'Sashiageru' ? ['\u5DEE\u3057\u4E0A\u3052\u308B', '\u3055\u3057\u3042\u3052\u308B']\n                : aux === 'Yaru' ? ['\u3084\u308B']\n                    : aux === 'Morau' ? ['\u3082\u3089\u3046']\n                        : aux === 'Itadaku' ? ['\u3044\u305F\u3060\u304F']\n                            : aux === 'Kureru' ? ['\u304F\u308C\u308B']\n                                : aux === 'Kudasaru' ? ['\u304F\u3060\u3055\u308B']\n                                    : aux === 'TeIru' ? ['\u3044\u308B', '\u308B']\n                                        : aux === 'TeAru' ? ['\u3042\u308B']\n                                            : aux === 'Miru' ? ['\u307F\u308B']\n                                                : aux === 'Iku' ? ['\u3044\u304F']\n                                                    : aux === 'Kuru' ? ['\u304F\u308B']\n                                                        : aux === 'Oku' ? ['\u304A\u304F']\n                                                            : aux === 'TeOru' ? ['\u304A\u308B']\n                                                                : [];\n        if (!endings[0]) {\n            throw new Error('missing ternary');\n        }\n        if (aux === 'Kuru') {\n            return conjugate(endings[0], conj).map(suffix => vte + suffix);\n        }\n        const endingTypeII = aux === 'Ageru' || aux === 'Sashiageru' || aux === 'Kureru' || aux === 'TeIru' || aux === 'Miru';\n        const newVerbs = endings.map(ending => vte + ending);\n        if (aux === 'Oku') {\n            newVerbs.push(vte.slice(0, -1) + '\u3068\u304F');\n        }\n        return newVerbs.flatMap(v => conjugate(v, conj, endingTypeII));\n    }\n    else if (aux === 'Shimau') {\n        const vte = conjugate(verb, 'Te', typeII)[0];\n        const shimau = conjugate(vte + '\u3057\u307E\u3046', conj);\n        const noTe = vte.slice(0, -1);\n        // see https://www.sljfaq.org/afaq/colloquial-contractions.html\n        if (vte.endsWith('\u3066')) {\n            // no rendaku\n            const chau = conjugate(noTe + '\u3061\u3083\u3046', conj);\n            const chimau = conjugate(noTe + '\u3061\u307E\u3046', conj);\n            return shimau.concat(chau).concat(chimau);\n        }\n        const jimau = conjugate(noTe + '\u3058\u307E\u3046', conj);\n        const dimau = conjugate(noTe + '\u3062\u307E\u3046', conj);\n        return shimau.concat(jimau).concat(dimau);\n    }\n    isNever(aux);\n    throw new Error('Unhandled auxiliary');\n}\nfunction isNever(x) { return x; }\nfunction verbDeconjugate(conjugated, dictionaryForm, typeII = false, maxAuxDepth = Infinity) {\n    const hits = [];\n    for (const conj of exports.conjugations) {\n        try {\n            const result = conjugate(dictionaryForm, conj, typeII);\n            if (result.includes(conjugated)) {\n                hits.push({ conjugation: conj, auxiliaries: [], result });\n            }\n        }\n        catch (_a) { }\n    }\n    if (maxAuxDepth <= 0) {\n        return hits;\n    }\n    for (const aux of exports.auxiliaries) {\n        for (const conj of exports.conjugations) {\n            try {\n                const result = conjugateAuxiliary(dictionaryForm, aux, conj, typeII);\n                if (result.includes(conjugated)) {\n                    hits.push({ conjugation: conj, auxiliaries: [aux], result });\n                }\n            }\n            catch (_b) { }\n        }\n    }\n    if (maxAuxDepth <= 1) {\n        return hits;\n    }\n    const penultimates = [\n        'Ageru', 'Sashiageru', 'Yaru', 'Morau', 'Itadaku', 'Kureru', 'Kudasaru', 'Miru', 'Iku', 'Kuru', 'Oku', 'Shimau',\n        'TeIru', 'TeAru', 'TeOru', 'Potential', 'ReruRareru', 'SeruSaseru'\n    ];\n    const depth2Finals = ['Masu', 'SoudaConjecture', 'SoudaHearsay', 'TeIru'];\n    for (const penultimate of penultimates) {\n        for (const final of depth2Finals) {\n            for (const conj of exports.conjugations) {\n                const auxs = [penultimate, final];\n                try {\n                    const result = conjugateAuxiliaries(dictionaryForm, auxs, conj, typeII);\n                    if (result.includes(conjugated)) {\n                        hits.push({ conjugation: conj, auxiliaries: auxs, result });\n                    }\n                }\n                catch (_c) { }\n            }\n        }\n    }\n    if (maxAuxDepth <= 2) {\n        return hits;\n    }\n    const antepenultimates = ['SeruSaseru', 'ReruRareru'];\n    const depth3Finals = ['Masu'];\n    for (const ante of antepenultimates) {\n        for (const penultimate of penultimates) {\n            for (const final of depth3Finals) {\n                for (const conj of exports.conjugations) {\n                    const auxs = [ante, penultimate, final];\n                    try {\n                        const result = conjugateAuxiliaries(dictionaryForm, auxs, conj, typeII);\n                        if (result.includes(conjugated)) {\n                            hits.push({ conjugation: conj, auxiliaries: auxs, result });\n                        }\n                    }\n                    catch (_d) { }\n                }\n            }\n        }\n    }\n    return hits;\n}\nexports.verbDeconjugate = verbDeconjugate;\nvar adjective_1 = require(\"./adjective\");\nObject.defineProperty(exports, \"adjConjugations\", { enumerable: true, get: function () { return adjective_1.adjConjugations; } });\nObject.defineProperty(exports, \"adjConjugate\", { enumerable: true, get: function () { return adjective_1.adjConjugate; } });\nObject.defineProperty(exports, \"adjDeconjugate\", { enumerable: true, get: function () { return adjective_1.adjDeconjugate; } });\n"],
  "mappings": "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",
  "names": ["hiragana_exports", "__export", "lookup", "character", "vowel", "idx", "charToVecIndex", "ret", "vec", "split", "init_hiragana", "__esmMin", "s", "row", "rowidx", "char", "adjective_exports", "__export", "adjConjugate", "adjConjugations", "adjDeconjugate", "never", "x", "adjective", "conj", "iAdjective", "stem", "addSa", "suffix", "conjugated", "dictionary", "hits", "result", "init_adjective", "__esmMin", "require_kamiya_conjugator", "__commonJSMin", "exports", "_a", "hiragana_1", "specialCasesRaw", "specialCases", "verb", "conj", "result", "outer", "conjToIdx", "x", "i", "tteRaw", "tte", "tail", "quad", "conjugateTypeI", "conjugateSuru", "conjugateKuru", "conjugateDa", "conjugateDesu", "specialHit", "head", "idx", "tidx", "tteHit", "conjugateTypeII", "ret", "_verb", "conjugateStrict", "typeII", "conjugate", "conjugateAuxiliaries", "initialVerb", "auxs", "finalConj", "initialTypeII", "verbs", "auxIdx", "aux", "prevAux", "heads", "s", "tails", "conjugateAuxiliary", "prefix", "t", "newverb", "base", "bases", "suffix", "base1", "base2", "append", "vte", "endings", "endingTypeII", "newVerbs", "ending", "v", "shimau", "noTe", "chau", "chimau", "jimau", "dimau", "verbDeconjugate", "conjugated", "dictionaryForm", "maxAuxDepth", "hits", "_b", "penultimates", "depth2Finals", "penultimate", "final", "_c", "antepenultimates", "depth3Finals", "ante", "_d", "adjective_1"]
}
